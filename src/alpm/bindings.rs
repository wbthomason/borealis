/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::alpm_t::c_char;
pub type int_least16_t = ::alpm_t::c_short;
pub type int_least32_t = ::alpm_t::c_int;
pub type int_least64_t = ::alpm_t::c_long;
pub type uint_least8_t = ::alpm_t::c_uchar;
pub type uint_least16_t = ::alpm_t::c_ushort;
pub type uint_least32_t = ::alpm_t::c_uint;
pub type uint_least64_t = ::alpm_t::c_ulong;
pub type int_fast8_t = ::alpm_t::c_char;
pub type int_fast16_t = ::alpm_t::c_long;
pub type int_fast32_t = ::alpm_t::c_long;
pub type int_fast64_t = ::alpm_t::c_long;
pub type uint_fast8_t = ::alpm_t::c_uchar;
pub type uint_fast16_t = ::alpm_t::c_ulong;
pub type uint_fast32_t = ::alpm_t::c_ulong;
pub type uint_fast64_t = ::alpm_t::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::alpm_t::c_long;
pub type uintmax_t = ::alpm_t::c_ulong;
pub type __u_char = ::alpm_t::c_uchar;
pub type __u_short = ::alpm_t::c_ushort;
pub type __u_int = ::alpm_t::c_uint;
pub type __u_long = ::alpm_t::c_ulong;
pub type __int8_t = ::alpm_t::c_char;
pub type __uint8_t = ::alpm_t::c_uchar;
pub type __int16_t = ::alpm_t::c_short;
pub type __uint16_t = ::alpm_t::c_ushort;
pub type __int32_t = ::alpm_t::c_int;
pub type __uint32_t = ::alpm_t::c_uint;
pub type __int64_t = ::alpm_t::c_long;
pub type __uint64_t = ::alpm_t::c_ulong;
pub type __quad_t = ::alpm_t::c_long;
pub type __u_quad_t = ::alpm_t::c_ulong;
pub type __dev_t = ::alpm_t::c_ulong;
pub type __uid_t = ::alpm_t::c_uint;
pub type __gid_t = ::alpm_t::c_uint;
pub type __ino_t = ::alpm_t::c_ulong;
pub type __ino64_t = ::alpm_t::c_ulong;
pub type __mode_t = ::alpm_t::c_uint;
pub type __nlink_t = ::alpm_t::c_ulong;
pub type __off_t = ::alpm_t::c_long;
pub type __off64_t = ::alpm_t::c_long;
pub type __pid_t = ::alpm_t::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::alpm_t::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::alpm_t::c_long;
pub type __rlim_t = ::alpm_t::c_ulong;
pub type __rlim64_t = ::alpm_t::c_ulong;
pub type __id_t = ::alpm_t::c_uint;
pub type __time_t = ::alpm_t::c_long;
pub type __useconds_t = ::alpm_t::c_uint;
pub type __suseconds_t = ::alpm_t::c_long;
pub type __daddr_t = ::alpm_t::c_int;
pub type __key_t = ::alpm_t::c_int;
pub type __clockid_t = ::alpm_t::c_int;
pub type __timer_t = *mut ::alpm_t::c_void;
pub type __blksize_t = ::alpm_t::c_long;
pub type __blkcnt_t = ::alpm_t::c_long;
pub type __blkcnt64_t = ::alpm_t::c_long;
pub type __fsblkcnt_t = ::alpm_t::c_ulong;
pub type __fsblkcnt64_t = ::alpm_t::c_ulong;
pub type __fsfilcnt_t = ::alpm_t::c_ulong;
pub type __fsfilcnt64_t = ::alpm_t::c_ulong;
pub type __fsword_t = ::alpm_t::c_long;
pub type __ssize_t = ::alpm_t::c_long;
pub type __syscall_slong_t = ::alpm_t::c_long;
pub type __syscall_ulong_t = ::alpm_t::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::alpm_t::c_char;
pub type __intptr_t = ::alpm_t::c_long;
pub type __socklen_t = ::alpm_t::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = usize;
pub type ulong = ::alpm_t::c_ulong;
pub type ushort = ::alpm_t::c_ushort;
pub type uint_ = ::alpm_t::c_uint;
pub type u_int8_t = ::alpm_t::c_uchar;
pub type u_int16_t = ::alpm_t::c_ushort;
pub type u_int32_t = ::alpm_t::c_uint;
pub type u_int64_t = ::alpm_t::c_ulong;
pub type register_t = ::alpm_t::c_long;
pub type __sig_atomic_t = ::alpm_t::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::alpm_t::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::alpm_t::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::alpm_t::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::alpm_t::c_int,
    pub __count: ::alpm_t::c_uint,
    pub __owner: ::alpm_t::c_int,
    pub __nusers: ::alpm_t::c_uint,
    pub __kind: ::alpm_t::c_int,
    pub __spins: ::alpm_t::c_short,
    pub __elision: ::alpm_t::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::alpm_t::c_int,
    pub __futex: ::alpm_t::c_uint,
    pub __total_seq: ::alpm_t::c_ulonglong,
    pub __wakeup_seq: ::alpm_t::c_ulonglong,
    pub __woken_seq: ::alpm_t::c_ulonglong,
    pub __mutex: *mut ::alpm_t::c_void,
    pub __nwaiters: ::alpm_t::c_uint,
    pub __broadcast_seq: ::alpm_t::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::alpm_t::c_uint;
pub type pthread_once_t = ::alpm_t::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::alpm_t::c_int,
    pub __nr_readers: ::alpm_t::c_uint,
    pub __readers_wakeup: ::alpm_t::c_uint,
    pub __writer_wakeup: ::alpm_t::c_uint,
    pub __nr_readers_queued: ::alpm_t::c_uint,
    pub __nr_writers_queued: ::alpm_t::c_uint,
    pub __writer: ::alpm_t::c_int,
    pub __shared: ::alpm_t::c_int,
    pub __rwelision: ::alpm_t::c_char,
    pub __pad1: [::alpm_t::c_uchar; 7usize],
    pub __pad2: ::alpm_t::c_ulong,
    pub __flags: ::alpm_t::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::alpm_t::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::alpm_t::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::alpm_t::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::alpm_t::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
impl ::std::default::Default for stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ptrdiff_t = isize;
pub type wchar_t = ::alpm_t::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::alpm_t::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::alpm_t::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::alpm_t::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::alpm_t::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::alpm_t::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::alpm_t::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::alpm_t::c_int,
    pub _IO_read_ptr: *mut ::alpm_t::c_char,
    pub _IO_read_end: *mut ::alpm_t::c_char,
    pub _IO_read_base: *mut ::alpm_t::c_char,
    pub _IO_write_base: *mut ::alpm_t::c_char,
    pub _IO_write_ptr: *mut ::alpm_t::c_char,
    pub _IO_write_end: *mut ::alpm_t::c_char,
    pub _IO_buf_base: *mut ::alpm_t::c_char,
    pub _IO_buf_end: *mut ::alpm_t::c_char,
    pub _IO_save_base: *mut ::alpm_t::c_char,
    pub _IO_backup_base: *mut ::alpm_t::c_char,
    pub _IO_save_end: *mut ::alpm_t::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::alpm_t::c_int,
    pub _flags2: ::alpm_t::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::alpm_t::c_ushort,
    pub _vtable_offset: ::alpm_t::c_char,
    pub _shortbuf: [::alpm_t::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::alpm_t::c_void,
    pub __pad2: *mut ::alpm_t::c_void,
    pub __pad3: *mut ::alpm_t::c_void,
    pub __pad4: *mut ::alpm_t::c_void,
    pub __pad5: size_t,
    pub _mode: ::alpm_t::c_int,
    pub _unused2: [::alpm_t::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::alpm_t::c_void,
                                               __buf: *mut ::alpm_t::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::alpm_t::c_void,
                                               __buf: *const ::alpm_t::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::alpm_t::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::alpm_t::c_int)
                              -> ::alpm_t::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::alpm_t::c_void)
                              -> ::alpm_t::c_int>;
pub type fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tm {
    pub tm_sec: ::alpm_t::c_int,
    pub tm_min: ::alpm_t::c_int,
    pub tm_hour: ::alpm_t::c_int,
    pub tm_mday: ::alpm_t::c_int,
    pub tm_mon: ::alpm_t::c_int,
    pub tm_year: ::alpm_t::c_int,
    pub tm_wday: ::alpm_t::c_int,
    pub tm_yday: ::alpm_t::c_int,
    pub tm_isdst: ::alpm_t::c_int,
    pub tm_gmtoff: ::alpm_t::c_long,
    pub tm_zone: *const ::alpm_t::c_char,
}
impl ::std::default::Default for tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
impl ::std::default::Default for itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum sigevent { }
pub enum __locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::alpm_t::c_ushort,
    pub __ctype_tolower: *const ::alpm_t::c_int,
    pub __ctype_toupper: *const ::alpm_t::c_int,
    pub __names: [*const ::alpm_t::c_char; 13usize],
}
impl ::std::default::Default for __locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub type __gwchar_t = ::alpm_t::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct imaxdiv_t {
    pub quot: ::alpm_t::c_long,
    pub rem: ::alpm_t::c_long,
}
impl ::std::default::Default for imaxdiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed4 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20,
}
pub const _SC_IOV_MAX: Enum_Unnamed5 = Enum_Unnamed5::_SC_UIO_MAXIOV;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed5 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149,
}
pub type la_int64_t = int64_t;
pub type la_ssize_t = ssize_t;
pub enum archive { }
pub enum archive_entry { }
pub type archive_read_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data:
                                                   *mut ::alpm_t::c_void,
                                               _buffer:
                                                   *mut *const ::alpm_t::c_void)
                              -> la_ssize_t>;
pub type archive_skip_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data:
                                                   *mut ::alpm_t::c_void,
                                               request: la_int64_t)
                              -> la_int64_t>;
pub type archive_seek_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data:
                                                   *mut ::alpm_t::c_void,
                                               offset: la_int64_t,
                                               whence: ::alpm_t::c_int)
                              -> la_int64_t>;
pub type archive_write_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data:
                                                   *mut ::alpm_t::c_void,
                                               _buffer:
                                                   *const ::alpm_t::c_void,
                                               _length: size_t)
                              -> la_ssize_t>;
pub type archive_open_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data:
                                                   *mut ::alpm_t::c_void)
                              -> ::alpm_t::c_int>;
pub type archive_close_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data:
                                                   *mut ::alpm_t::c_void)
                              -> ::alpm_t::c_int>;
pub type archive_switch_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data1:
                                                   *mut ::alpm_t::c_void,
                                               _client_data2:
                                                   *mut ::alpm_t::c_void)
                              -> ::alpm_t::c_int>;
pub type archive_passphrase_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut archive,
                                               _client_data:
                                                   *mut ::alpm_t::c_void)
                              -> *const ::alpm_t::c_char>;
pub enum archive_acl { }
pub enum archive_entry_linkresolver { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::alpm_t::c_int,
    pub rem: ::alpm_t::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::alpm_t::c_long,
    pub rem: ::alpm_t::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::alpm_t::c_longlong,
    pub rem: ::alpm_t::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::alpm_t::c_int,
    pub rand_deg: ::alpm_t::c_int,
    pub rand_sep: ::alpm_t::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::alpm_t::c_ushort; 3usize],
    pub __old_x: [::alpm_t::c_ushort; 3usize],
    pub __c: ::alpm_t::c_ushort,
    pub __init: ::alpm_t::c_ushort,
    pub __a: ::alpm_t::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::alpm_t::c_void,
                                               arg2: *const ::alpm_t::c_void)
                              -> ::alpm_t::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __alpm_list_t {
    pub data: *mut ::alpm_t::c_void,
    pub prev: *mut __alpm_list_t,
    pub next: *mut __alpm_list_t,
}
impl ::std::default::Default for __alpm_list_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_list_t = __alpm_list_t;
pub type alpm_list_fn_free =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::alpm_t::c_void)>;
pub type alpm_list_fn_cmp =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::alpm_t::c_void,
                                               arg2: *const ::alpm_t::c_void)
                              -> ::alpm_t::c_int>;
pub enum __alpm_handle_t { }
pub type alpm_handle_t = __alpm_handle_t;
pub enum __alpm_db_t { }
pub type alpm_db_t = __alpm_db_t;
pub enum __alpm_pkg_t { }
pub type alpm_pkg_t = __alpm_pkg_t;
pub enum __alpm_trans_t { }
pub type alpm_trans_t = __alpm_trans_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_errno_t {
    ALPM_ERR_MEMORY = 1,
    ALPM_ERR_SYSTEM = 2,
    ALPM_ERR_BADPERMS = 3,
    ALPM_ERR_NOT_A_FILE = 4,
    ALPM_ERR_NOT_A_DIR = 5,
    ALPM_ERR_WRONG_ARGS = 6,
    ALPM_ERR_DISK_SPACE = 7,
    ALPM_ERR_HANDLE_NULL = 8,
    ALPM_ERR_HANDLE_NOT_NULL = 9,
    ALPM_ERR_HANDLE_LOCK = 10,
    ALPM_ERR_DB_OPEN = 11,
    ALPM_ERR_DB_CREATE = 12,
    ALPM_ERR_DB_NULL = 13,
    ALPM_ERR_DB_NOT_NULL = 14,
    ALPM_ERR_DB_NOT_FOUND = 15,
    ALPM_ERR_DB_INVALID = 16,
    ALPM_ERR_DB_INVALID_SIG = 17,
    ALPM_ERR_DB_VERSION = 18,
    ALPM_ERR_DB_WRITE = 19,
    ALPM_ERR_DB_REMOVE = 20,
    ALPM_ERR_SERVER_BAD_URL = 21,
    ALPM_ERR_SERVER_NONE = 22,
    ALPM_ERR_TRANS_NOT_NULL = 23,
    ALPM_ERR_TRANS_NULL = 24,
    ALPM_ERR_TRANS_DUP_TARGET = 25,
    ALPM_ERR_TRANS_NOT_INITIALIZED = 26,
    ALPM_ERR_TRANS_NOT_PREPARED = 27,
    ALPM_ERR_TRANS_ABORT = 28,
    ALPM_ERR_TRANS_TYPE = 29,
    ALPM_ERR_TRANS_NOT_LOCKED = 30,
    ALPM_ERR_TRANS_HOOK_FAILED = 31,
    ALPM_ERR_PKG_NOT_FOUND = 32,
    ALPM_ERR_PKG_IGNORED = 33,
    ALPM_ERR_PKG_INVALID = 34,
    ALPM_ERR_PKG_INVALID_CHECKSUM = 35,
    ALPM_ERR_PKG_INVALID_SIG = 36,
    ALPM_ERR_PKG_MISSING_SIG = 37,
    ALPM_ERR_PKG_OPEN = 38,
    ALPM_ERR_PKG_CANT_REMOVE = 39,
    ALPM_ERR_PKG_INVALID_NAME = 40,
    ALPM_ERR_PKG_INVALID_ARCH = 41,
    ALPM_ERR_PKG_REPO_NOT_FOUND = 42,
    ALPM_ERR_SIG_MISSING = 43,
    ALPM_ERR_SIG_INVALID = 44,
    ALPM_ERR_DLT_INVALID = 45,
    ALPM_ERR_DLT_PATCHFAILED = 46,
    ALPM_ERR_UNSATISFIED_DEPS = 47,
    ALPM_ERR_CONFLICTING_DEPS = 48,
    ALPM_ERR_FILE_CONFLICTS = 49,
    ALPM_ERR_RETRIEVE = 50,
    ALPM_ERR_INVALID_REGEX = 51,
    ALPM_ERR_LIBARCHIVE = 52,
    ALPM_ERR_LIBCURL = 53,
    ALPM_ERR_EXTERNAL_DOWNLOAD = 54,
    ALPM_ERR_GPGME = 55,
}
pub type alpm_errno_t = _alpm_errno_t;
pub type alpm_time_t = int64_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_pkgreason_t {
    ALPM_PKG_REASON_EXPLICIT = 0,
    ALPM_PKG_REASON_DEPEND = 1,
}
pub type alpm_pkgreason_t = _alpm_pkgreason_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_pkgfrom_t {
    ALPM_PKG_FROM_FILE = 1,
    ALPM_PKG_FROM_LOCALDB = 2,
    ALPM_PKG_FROM_SYNCDB = 3,
}
pub type alpm_pkgfrom_t = _alpm_pkgfrom_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_pkgvalidation_t {
    ALPM_PKG_VALIDATION_UNKNOWN = 0,
    ALPM_PKG_VALIDATION_NONE = 1,
    ALPM_PKG_VALIDATION_MD5SUM = 2,
    ALPM_PKG_VALIDATION_SHA256SUM = 4,
    ALPM_PKG_VALIDATION_SIGNATURE = 8,
}
pub type alpm_pkgvalidation_t = _alpm_pkgvalidation_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_depmod_t {
    ALPM_DEP_MOD_ANY = 1,
    ALPM_DEP_MOD_EQ = 2,
    ALPM_DEP_MOD_GE = 3,
    ALPM_DEP_MOD_LE = 4,
    ALPM_DEP_MOD_GT = 5,
    ALPM_DEP_MOD_LT = 6,
}
pub type alpm_depmod_t = _alpm_depmod_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_fileconflicttype_t {
    ALPM_FILECONFLICT_TARGET = 1,
    ALPM_FILECONFLICT_FILESYSTEM = 2,
}
pub type alpm_fileconflicttype_t = _alpm_fileconflicttype_t;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _alpm_siglevel_t {
    ALPM_SIG_PACKAGE = 1,
    ALPM_SIG_PACKAGE_OPTIONAL = 2,
    ALPM_SIG_PACKAGE_MARGINAL_OK = 4,
    ALPM_SIG_PACKAGE_UNKNOWN_OK = 8,
    ALPM_SIG_DATABASE = 1024,
    ALPM_SIG_DATABASE_OPTIONAL = 2048,
    ALPM_SIG_DATABASE_MARGINAL_OK = 4096,
    ALPM_SIG_DATABASE_UNKNOWN_OK = 8192,
    ALPM_SIG_USE_DEFAULT = -2147483648,
}
pub type alpm_siglevel_t = _alpm_siglevel_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_sigstatus_t {
    ALPM_SIGSTATUS_VALID = 0,
    ALPM_SIGSTATUS_KEY_EXPIRED = 1,
    ALPM_SIGSTATUS_SIG_EXPIRED = 2,
    ALPM_SIGSTATUS_KEY_UNKNOWN = 3,
    ALPM_SIGSTATUS_KEY_DISABLED = 4,
    ALPM_SIGSTATUS_INVALID = 5,
}
pub type alpm_sigstatus_t = _alpm_sigstatus_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_sigvalidity_t {
    ALPM_SIGVALIDITY_FULL = 0,
    ALPM_SIGVALIDITY_MARGINAL = 1,
    ALPM_SIGVALIDITY_NEVER = 2,
    ALPM_SIGVALIDITY_UNKNOWN = 3,
}
pub type alpm_sigvalidity_t = _alpm_sigvalidity_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_depend_t {
    pub name: *mut ::alpm_t::c_char,
    pub version: *mut ::alpm_t::c_char,
    pub desc: *mut ::alpm_t::c_char,
    pub name_hash: ::alpm_t::c_ulong,
    pub mod_: alpm_depmod_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _alpm_depend_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_depend_t = _alpm_depend_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_depmissing_t {
    pub target: *mut ::alpm_t::c_char,
    pub depend: *mut alpm_depend_t,
    pub causingpkg: *mut ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_depmissing_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_depmissing_t = _alpm_depmissing_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_conflict_t {
    pub package1_hash: ::alpm_t::c_ulong,
    pub package2_hash: ::alpm_t::c_ulong,
    pub package1: *mut ::alpm_t::c_char,
    pub package2: *mut ::alpm_t::c_char,
    pub reason: *mut alpm_depend_t,
}
impl ::std::default::Default for _alpm_conflict_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_conflict_t = _alpm_conflict_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_fileconflict_t {
    pub target: *mut ::alpm_t::c_char,
    pub type_: alpm_fileconflicttype_t,
    pub file: *mut ::alpm_t::c_char,
    pub ctarget: *mut ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_fileconflict_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_fileconflict_t = _alpm_fileconflict_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_group_t {
    pub name: *mut ::alpm_t::c_char,
    pub packages: *mut alpm_list_t,
}
impl ::std::default::Default for _alpm_group_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_group_t = _alpm_group_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_delta_t {
    pub delta: *mut ::alpm_t::c_char,
    pub delta_md5: *mut ::alpm_t::c_char,
    pub from: *mut ::alpm_t::c_char,
    pub to: *mut ::alpm_t::c_char,
    pub delta_size: off_t,
    pub download_size: off_t,
}
impl ::std::default::Default for _alpm_delta_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_delta_t = _alpm_delta_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_file_t {
    pub name: *mut ::alpm_t::c_char,
    pub size: off_t,
    pub mode: mode_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _alpm_file_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_file_t = _alpm_file_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_filelist_t {
    pub count: size_t,
    pub files: *mut alpm_file_t,
}
impl ::std::default::Default for _alpm_filelist_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_filelist_t = _alpm_filelist_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_backup_t {
    pub name: *mut ::alpm_t::c_char,
    pub hash: *mut ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_backup_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_backup_t = _alpm_backup_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_pgpkey_t {
    pub data: *mut ::alpm_t::c_void,
    pub fingerprint: *mut ::alpm_t::c_char,
    pub uid: *mut ::alpm_t::c_char,
    pub name: *mut ::alpm_t::c_char,
    pub email: *mut ::alpm_t::c_char,
    pub created: alpm_time_t,
    pub expires: alpm_time_t,
    pub length: ::alpm_t::c_uint,
    pub revoked: ::alpm_t::c_uint,
    pub pubkey_algo: ::alpm_t::c_char,
    _bindgen_padding_0_: [u8; 7usize],
}
impl ::std::default::Default for _alpm_pgpkey_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_pgpkey_t = _alpm_pgpkey_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_sigresult_t {
    pub key: alpm_pgpkey_t,
    pub status: alpm_sigstatus_t,
    pub validity: alpm_sigvalidity_t,
}
impl ::std::default::Default for _alpm_sigresult_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_sigresult_t = _alpm_sigresult_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_siglist_t {
    pub count: size_t,
    pub results: *mut alpm_sigresult_t,
}
impl ::std::default::Default for _alpm_siglist_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_siglist_t = _alpm_siglist_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_hook_when_t {
    ALPM_HOOK_PRE_TRANSACTION = 1,
    ALPM_HOOK_POST_TRANSACTION = 2,
}
pub type alpm_hook_when_t = _alpm_hook_when_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_loglevel_t {
    ALPM_LOG_ERROR = 1,
    ALPM_LOG_WARNING = 2,
    ALPM_LOG_DEBUG = 4,
    ALPM_LOG_FUNCTION = 8,
}
pub type alpm_loglevel_t = _alpm_loglevel_t;
pub type alpm_cb_log =
    ::std::option::Option<unsafe extern "C" fn(arg1: alpm_loglevel_t,
                                               arg2: *const ::alpm_t::c_char,
                                               arg3: va_list)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_event_type_t {
    ALPM_EVENT_CHECKDEPS_START = 1,
    ALPM_EVENT_CHECKDEPS_DONE = 2,
    ALPM_EVENT_FILECONFLICTS_START = 3,
    ALPM_EVENT_FILECONFLICTS_DONE = 4,
    ALPM_EVENT_RESOLVEDEPS_START = 5,
    ALPM_EVENT_RESOLVEDEPS_DONE = 6,
    ALPM_EVENT_INTERCONFLICTS_START = 7,
    ALPM_EVENT_INTERCONFLICTS_DONE = 8,
    ALPM_EVENT_TRANSACTION_START = 9,
    ALPM_EVENT_TRANSACTION_DONE = 10,
    ALPM_EVENT_PACKAGE_OPERATION_START = 11,
    ALPM_EVENT_PACKAGE_OPERATION_DONE = 12,
    ALPM_EVENT_INTEGRITY_START = 13,
    ALPM_EVENT_INTEGRITY_DONE = 14,
    ALPM_EVENT_LOAD_START = 15,
    ALPM_EVENT_LOAD_DONE = 16,
    ALPM_EVENT_DELTA_INTEGRITY_START = 17,
    ALPM_EVENT_DELTA_INTEGRITY_DONE = 18,
    ALPM_EVENT_DELTA_PATCHES_START = 19,
    ALPM_EVENT_DELTA_PATCHES_DONE = 20,
    ALPM_EVENT_DELTA_PATCH_START = 21,
    ALPM_EVENT_DELTA_PATCH_DONE = 22,
    ALPM_EVENT_DELTA_PATCH_FAILED = 23,
    ALPM_EVENT_SCRIPTLET_INFO = 24,
    ALPM_EVENT_RETRIEVE_START = 25,
    ALPM_EVENT_RETRIEVE_DONE = 26,
    ALPM_EVENT_RETRIEVE_FAILED = 27,
    ALPM_EVENT_PKGDOWNLOAD_START = 28,
    ALPM_EVENT_PKGDOWNLOAD_DONE = 29,
    ALPM_EVENT_PKGDOWNLOAD_FAILED = 30,
    ALPM_EVENT_DISKSPACE_START = 31,
    ALPM_EVENT_DISKSPACE_DONE = 32,
    ALPM_EVENT_OPTDEP_REMOVAL = 33,
    ALPM_EVENT_DATABASE_MISSING = 34,
    ALPM_EVENT_KEYRING_START = 35,
    ALPM_EVENT_KEYRING_DONE = 36,
    ALPM_EVENT_KEY_DOWNLOAD_START = 37,
    ALPM_EVENT_KEY_DOWNLOAD_DONE = 38,
    ALPM_EVENT_PACNEW_CREATED = 39,
    ALPM_EVENT_PACSAVE_CREATED = 40,
    ALPM_EVENT_HOOK_START = 41,
    ALPM_EVENT_HOOK_DONE = 42,
    ALPM_EVENT_HOOK_RUN_START = 43,
    ALPM_EVENT_HOOK_RUN_DONE = 44,
}
pub type alpm_event_type_t = _alpm_event_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_any_t {
    pub type_: alpm_event_type_t,
}
impl ::std::default::Default for _alpm_event_any_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_any_t = _alpm_event_any_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_package_operation_t {
    ALPM_PACKAGE_INSTALL = 1,
    ALPM_PACKAGE_UPGRADE = 2,
    ALPM_PACKAGE_REINSTALL = 3,
    ALPM_PACKAGE_DOWNGRADE = 4,
    ALPM_PACKAGE_REMOVE = 5,
}
pub type alpm_package_operation_t = _alpm_package_operation_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_package_operation_t {
    pub type_: alpm_event_type_t,
    pub operation: alpm_package_operation_t,
    pub oldpkg: *mut alpm_pkg_t,
    pub newpkg: *mut alpm_pkg_t,
}
impl ::std::default::Default for _alpm_event_package_operation_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_package_operation_t = _alpm_event_package_operation_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_optdep_removal_t {
    pub type_: alpm_event_type_t,
    pub pkg: *mut alpm_pkg_t,
    pub optdep: *mut alpm_depend_t,
}
impl ::std::default::Default for _alpm_event_optdep_removal_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_optdep_removal_t = _alpm_event_optdep_removal_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_delta_patch_t {
    pub type_: alpm_event_type_t,
    pub delta: *mut alpm_delta_t,
}
impl ::std::default::Default for _alpm_event_delta_patch_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_delta_patch_t = _alpm_event_delta_patch_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_scriptlet_info_t {
    pub type_: alpm_event_type_t,
    pub line: *const ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_event_scriptlet_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_scriptlet_info_t = _alpm_event_scriptlet_info_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_database_missing_t {
    pub type_: alpm_event_type_t,
    pub dbname: *const ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_event_database_missing_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_database_missing_t = _alpm_event_database_missing_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_pkgdownload_t {
    pub type_: alpm_event_type_t,
    pub file: *const ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_event_pkgdownload_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_pkgdownload_t = _alpm_event_pkgdownload_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_pacnew_created_t {
    pub type_: alpm_event_type_t,
    pub from_noupgrade: ::alpm_t::c_int,
    pub oldpkg: *mut alpm_pkg_t,
    pub newpkg: *mut alpm_pkg_t,
    pub file: *const ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_event_pacnew_created_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_pacnew_created_t = _alpm_event_pacnew_created_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_pacsave_created_t {
    pub type_: alpm_event_type_t,
    pub oldpkg: *mut alpm_pkg_t,
    pub file: *const ::alpm_t::c_char,
}
impl ::std::default::Default for _alpm_event_pacsave_created_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_pacsave_created_t = _alpm_event_pacsave_created_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_hook_t {
    pub type_: alpm_event_type_t,
    pub when: alpm_hook_when_t,
}
impl ::std::default::Default for _alpm_event_hook_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_hook_t = _alpm_event_hook_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_hook_run_t {
    pub type_: alpm_event_type_t,
    pub name: *const ::alpm_t::c_char,
    pub desc: *const ::alpm_t::c_char,
    pub position: size_t,
    pub total: size_t,
}
impl ::std::default::Default for _alpm_event_hook_run_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_hook_run_t = _alpm_event_hook_run_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_event_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl _alpm_event_t {
    pub unsafe fn type_(&mut self) -> *mut alpm_event_type_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn any(&mut self) -> *mut alpm_event_any_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn package_operation(&mut self)
     -> *mut alpm_event_package_operation_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn optdep_removal(&mut self)
     -> *mut alpm_event_optdep_removal_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn delta_patch(&mut self) -> *mut alpm_event_delta_patch_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn scriptlet_info(&mut self)
     -> *mut alpm_event_scriptlet_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn database_missing(&mut self)
     -> *mut alpm_event_database_missing_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pkgdownload(&mut self) -> *mut alpm_event_pkgdownload_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pacnew_created(&mut self)
     -> *mut alpm_event_pacnew_created_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pacsave_created(&mut self)
     -> *mut alpm_event_pacsave_created_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn hook(&mut self) -> *mut alpm_event_hook_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn hook_run(&mut self) -> *mut alpm_event_hook_run_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for _alpm_event_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_event_t = _alpm_event_t;
pub type alpm_cb_event =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut alpm_event_t)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_question_type_t {
    ALPM_QUESTION_INSTALL_IGNOREPKG = 1,
    ALPM_QUESTION_REPLACE_PKG = 2,
    ALPM_QUESTION_CONFLICT_PKG = 4,
    ALPM_QUESTION_CORRUPTED_PKG = 8,
    ALPM_QUESTION_REMOVE_PKGS = 16,
    ALPM_QUESTION_SELECT_PROVIDER = 32,
    ALPM_QUESTION_IMPORT_KEY = 64,
}
pub type alpm_question_type_t = _alpm_question_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_any_t {
    pub type_: alpm_question_type_t,
    pub answer: ::alpm_t::c_int,
}
impl ::std::default::Default for _alpm_question_any_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_any_t = _alpm_question_any_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_install_ignorepkg_t {
    pub type_: alpm_question_type_t,
    pub install: ::alpm_t::c_int,
    pub pkg: *mut alpm_pkg_t,
}
impl ::std::default::Default for _alpm_question_install_ignorepkg_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_install_ignorepkg_t =
    _alpm_question_install_ignorepkg_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_replace_t {
    pub type_: alpm_question_type_t,
    pub replace: ::alpm_t::c_int,
    pub oldpkg: *mut alpm_pkg_t,
    pub newpkg: *mut alpm_pkg_t,
    pub newdb: *mut alpm_db_t,
}
impl ::std::default::Default for _alpm_question_replace_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_replace_t = _alpm_question_replace_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_conflict_t {
    pub type_: alpm_question_type_t,
    pub remove: ::alpm_t::c_int,
    pub conflict: *mut alpm_conflict_t,
}
impl ::std::default::Default for _alpm_question_conflict_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_conflict_t = _alpm_question_conflict_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_corrupted_t {
    pub type_: alpm_question_type_t,
    pub remove: ::alpm_t::c_int,
    pub filepath: *const ::alpm_t::c_char,
    pub reason: alpm_errno_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _alpm_question_corrupted_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_corrupted_t = _alpm_question_corrupted_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_remove_pkgs_t {
    pub type_: alpm_question_type_t,
    pub skip: ::alpm_t::c_int,
    pub packages: *mut alpm_list_t,
}
impl ::std::default::Default for _alpm_question_remove_pkgs_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_remove_pkgs_t = _alpm_question_remove_pkgs_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_select_provider_t {
    pub type_: alpm_question_type_t,
    pub use_index: ::alpm_t::c_int,
    pub providers: *mut alpm_list_t,
    pub depend: *mut alpm_depend_t,
}
impl ::std::default::Default for _alpm_question_select_provider_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_select_provider_t = _alpm_question_select_provider_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_import_key_t {
    pub type_: alpm_question_type_t,
    pub import: ::alpm_t::c_int,
    pub key: *mut alpm_pgpkey_t,
}
impl ::std::default::Default for _alpm_question_import_key_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_import_key_t = _alpm_question_import_key_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _alpm_question_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl _alpm_question_t {
    pub unsafe fn type_(&mut self) -> *mut alpm_question_type_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn any(&mut self) -> *mut alpm_question_any_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn install_ignorepkg(&mut self)
     -> *mut alpm_question_install_ignorepkg_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn replace(&mut self) -> *mut alpm_question_replace_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn conflict(&mut self) -> *mut alpm_question_conflict_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn corrupted(&mut self) -> *mut alpm_question_corrupted_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn remove_pkgs(&mut self) -> *mut alpm_question_remove_pkgs_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn select_provider(&mut self)
     -> *mut alpm_question_select_provider_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn import_key(&mut self) -> *mut alpm_question_import_key_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for _alpm_question_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type alpm_question_t = _alpm_question_t;
pub type alpm_cb_question =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut alpm_question_t)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_progress_t {
    ALPM_PROGRESS_ADD_START = 0,
    ALPM_PROGRESS_UPGRADE_START = 1,
    ALPM_PROGRESS_DOWNGRADE_START = 2,
    ALPM_PROGRESS_REINSTALL_START = 3,
    ALPM_PROGRESS_REMOVE_START = 4,
    ALPM_PROGRESS_CONFLICTS_START = 5,
    ALPM_PROGRESS_DISKSPACE_START = 6,
    ALPM_PROGRESS_INTEGRITY_START = 7,
    ALPM_PROGRESS_LOAD_START = 8,
    ALPM_PROGRESS_KEYRING_START = 9,
}
pub type alpm_progress_t = _alpm_progress_t;
pub type alpm_cb_progress =
    ::std::option::Option<unsafe extern "C" fn(arg1: alpm_progress_t,
                                               arg2: *const ::alpm_t::c_char,
                                               arg3: ::alpm_t::c_int,
                                               arg4: size_t, arg5: size_t)>;
pub type alpm_cb_download =
    ::std::option::Option<unsafe extern "C" fn(filename:
                                                   *const ::alpm_t::c_char,
                                               xfered: off_t, total: off_t)>;
pub type alpm_cb_totaldl = ::std::option::Option<extern "C" fn(total: off_t)>;
pub type alpm_cb_fetch =
    ::std::option::Option<unsafe extern "C" fn(url: *const ::alpm_t::c_char,
                                               localpath:
                                                   *const ::alpm_t::c_char,
                                               force: ::alpm_t::c_int)
                              -> ::alpm_t::c_int>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_db_usage_ {
    ALPM_DB_USAGE_SYNC = 1,
    ALPM_DB_USAGE_SEARCH = 2,
    ALPM_DB_USAGE_INSTALL = 4,
    ALPM_DB_USAGE_UPGRADE = 8,
    ALPM_DB_USAGE_ALL = 15,
}
pub type alpm_db_usage_t = _alpm_db_usage_;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _alpm_transflag_t {
    ALPM_TRANS_FLAG_NODEPS = 1,
    ALPM_TRANS_FLAG_FORCE = 2,
    ALPM_TRANS_FLAG_NOSAVE = 4,
    ALPM_TRANS_FLAG_NODEPVERSION = 8,
    ALPM_TRANS_FLAG_CASCADE = 16,
    ALPM_TRANS_FLAG_RECURSE = 32,
    ALPM_TRANS_FLAG_DBONLY = 64,
    ALPM_TRANS_FLAG_ALLDEPS = 256,
    ALPM_TRANS_FLAG_DOWNLOADONLY = 512,
    ALPM_TRANS_FLAG_NOSCRIPTLET = 1024,
    ALPM_TRANS_FLAG_NOCONFLICTS = 2048,
    ALPM_TRANS_FLAG_NEEDED = 8192,
    ALPM_TRANS_FLAG_ALLEXPLICIT = 16384,
    ALPM_TRANS_FLAG_UNNEEDED = 32768,
    ALPM_TRANS_FLAG_RECURSEALL = 65536,
    ALPM_TRANS_FLAG_NOLOCK = 131072,
}
pub type alpm_transflag_t = _alpm_transflag_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum alpm_caps {
    ALPM_CAPABILITY_NLS = 1,
    ALPM_CAPABILITY_DOWNLOADER = 2,
    ALPM_CAPABILITY_SIGNATURES = 4,
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::alpm_t::c_int;
    pub static mut sys_errlist: [*const ::alpm_t::c_char; 0usize];
    pub static mut __tzname: [*mut ::alpm_t::c_char; 2usize];
    pub static mut __daylight: ::alpm_t::c_int;
    pub static mut __timezone: ::alpm_t::c_long;
    pub static mut tzname: [*mut ::alpm_t::c_char; 2usize];
    pub static mut daylight: ::alpm_t::c_int;
    pub static mut timezone: ::alpm_t::c_long;
    pub static mut __environ: *mut *mut ::alpm_t::c_char;
    pub static mut optarg: *mut ::alpm_t::c_char;
    pub static mut optind: ::alpm_t::c_int;
    pub static mut opterr: ::alpm_t::c_int;
    pub static mut optopt: ::alpm_t::c_int;
}
extern "C" {
    pub fn select(__nfds: ::alpm_t::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::alpm_t::c_int;
    pub fn pselect(__nfds: ::alpm_t::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::alpm_t::c_int;
    pub fn gnu_dev_major(__dev: ::alpm_t::c_ulonglong) -> ::alpm_t::c_uint;
    pub fn gnu_dev_minor(__dev: ::alpm_t::c_ulonglong) -> ::alpm_t::c_uint;
    pub fn gnu_dev_makedev(__major: ::alpm_t::c_uint,
                           __minor: ::alpm_t::c_uint)
     -> ::alpm_t::c_ulonglong;
    pub fn stat(__file: *const ::alpm_t::c_char, __buf: *mut stat)
     -> ::alpm_t::c_int;
    pub fn fstat(__fd: ::alpm_t::c_int, __buf: *mut stat) -> ::alpm_t::c_int;
    pub fn fstatat(__fd: ::alpm_t::c_int, __file: *const ::alpm_t::c_char,
                   __buf: *mut stat, __flag: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn lstat(__file: *const ::alpm_t::c_char, __buf: *mut stat)
     -> ::alpm_t::c_int;
    pub fn chmod(__file: *const ::alpm_t::c_char, __mode: __mode_t)
     -> ::alpm_t::c_int;
    pub fn lchmod(__file: *const ::alpm_t::c_char, __mode: __mode_t)
     -> ::alpm_t::c_int;
    pub fn fchmod(__fd: ::alpm_t::c_int, __mode: __mode_t) -> ::alpm_t::c_int;
    pub fn fchmodat(__fd: ::alpm_t::c_int, __file: *const ::alpm_t::c_char,
                    __mode: __mode_t, __flag: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn umask(__mask: __mode_t) -> __mode_t;
    pub fn mkdir(__path: *const ::alpm_t::c_char, __mode: __mode_t)
     -> ::alpm_t::c_int;
    pub fn mkdirat(__fd: ::alpm_t::c_int, __path: *const ::alpm_t::c_char,
                   __mode: __mode_t) -> ::alpm_t::c_int;
    pub fn mknod(__path: *const ::alpm_t::c_char, __mode: __mode_t,
                 __dev: __dev_t) -> ::alpm_t::c_int;
    pub fn mknodat(__fd: ::alpm_t::c_int, __path: *const ::alpm_t::c_char,
                   __mode: __mode_t, __dev: __dev_t) -> ::alpm_t::c_int;
    pub fn mkfifo(__path: *const ::alpm_t::c_char, __mode: __mode_t)
     -> ::alpm_t::c_int;
    pub fn mkfifoat(__fd: ::alpm_t::c_int, __path: *const ::alpm_t::c_char,
                    __mode: __mode_t) -> ::alpm_t::c_int;
    pub fn utimensat(__fd: ::alpm_t::c_int, __path: *const ::alpm_t::c_char,
                     __times: *mut timespec, __flags: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn futimens(__fd: ::alpm_t::c_int, __times: *mut timespec)
     -> ::alpm_t::c_int;
    pub fn __fxstat(__ver: ::alpm_t::c_int, __fildes: ::alpm_t::c_int,
                    __stat_buf: *mut stat) -> ::alpm_t::c_int;
    pub fn __xstat(__ver: ::alpm_t::c_int,
                   __filename: *const ::alpm_t::c_char, __stat_buf: *mut stat)
     -> ::alpm_t::c_int;
    pub fn __lxstat(__ver: ::alpm_t::c_int,
                    __filename: *const ::alpm_t::c_char,
                    __stat_buf: *mut stat) -> ::alpm_t::c_int;
    pub fn __fxstatat(__ver: ::alpm_t::c_int, __fildes: ::alpm_t::c_int,
                      __filename: *const ::alpm_t::c_char,
                      __stat_buf: *mut stat, __flag: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn __xmknod(__ver: ::alpm_t::c_int, __path: *const ::alpm_t::c_char,
                    __mode: __mode_t, __dev: *mut __dev_t) -> ::alpm_t::c_int;
    pub fn __xmknodat(__ver: ::alpm_t::c_int, __fd: ::alpm_t::c_int,
                      __path: *const ::alpm_t::c_char, __mode: __mode_t,
                      __dev: *mut __dev_t) -> ::alpm_t::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::alpm_t::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::alpm_t::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::alpm_t::c_int;
    pub fn _IO_putc(__c: ::alpm_t::c_int, __fp: *mut _IO_FILE)
     -> ::alpm_t::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::alpm_t::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::alpm_t::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::alpm_t::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::alpm_t::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::alpm_t::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::alpm_t::c_char,
                        arg3: __gnuc_va_list) -> ::alpm_t::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::alpm_t::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::alpm_t::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::alpm_t::c_int, arg4: ::alpm_t::c_int)
     -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::alpm_t::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn rename(__old: *const ::alpm_t::c_char,
                  __new: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn renameat(__oldfd: ::alpm_t::c_int, __old: *const ::alpm_t::c_char,
                    __newfd: ::alpm_t::c_int, __new: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn tmpnam_r(__s: *mut ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn tempnam(__dir: *const ::alpm_t::c_char,
                   __pfx: *const ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn fopen(__filename: *const ::alpm_t::c_char,
                 __modes: *const ::alpm_t::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::alpm_t::c_char,
                   __modes: *const ::alpm_t::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::alpm_t::c_int, __modes: *const ::alpm_t::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::alpm_t::c_void, __len: size_t,
                    __modes: *const ::alpm_t::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::alpm_t::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::alpm_t::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::alpm_t::c_char,
                   __modes: ::alpm_t::c_int, __n: size_t) -> ::alpm_t::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::alpm_t::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn printf(__format: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn sprintf(__s: *mut ::alpm_t::c_char,
                   __format: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::alpm_t::c_char,
                    __arg: __gnuc_va_list) -> ::alpm_t::c_int;
    pub fn vprintf(__format: *const ::alpm_t::c_char, __arg: __gnuc_va_list)
     -> ::alpm_t::c_int;
    pub fn vsprintf(__s: *mut ::alpm_t::c_char,
                    __format: *const ::alpm_t::c_char, __arg: __gnuc_va_list)
     -> ::alpm_t::c_int;
    pub fn snprintf(__s: *mut ::alpm_t::c_char, __maxlen: size_t,
                    __format: *const ::alpm_t::c_char, ...)
     -> ::alpm_t::c_int;
    pub fn vsnprintf(__s: *mut ::alpm_t::c_char, __maxlen: size_t,
                     __format: *const ::alpm_t::c_char, __arg: __gnuc_va_list)
     -> ::alpm_t::c_int;
    pub fn vdprintf(__fd: ::alpm_t::c_int, __fmt: *const ::alpm_t::c_char,
                    __arg: __gnuc_va_list) -> ::alpm_t::c_int;
    pub fn dprintf(__fd: ::alpm_t::c_int, __fmt: *const ::alpm_t::c_char, ...)
     -> ::alpm_t::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::alpm_t::c_char, ...)
     -> ::alpm_t::c_int;
    pub fn scanf(__format: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn sscanf(__s: *const ::alpm_t::c_char,
                  __format: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::alpm_t::c_char,
                   __arg: __gnuc_va_list) -> ::alpm_t::c_int;
    pub fn vscanf(__format: *const ::alpm_t::c_char, __arg: __gnuc_va_list)
     -> ::alpm_t::c_int;
    pub fn vsscanf(__s: *const ::alpm_t::c_char,
                   __format: *const ::alpm_t::c_char, __arg: __gnuc_va_list)
     -> ::alpm_t::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn getc(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn getchar() -> ::alpm_t::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn getchar_unlocked() -> ::alpm_t::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn fputc(__c: ::alpm_t::c_int, __stream: *mut FILE)
     -> ::alpm_t::c_int;
    pub fn putc(__c: ::alpm_t::c_int, __stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn putchar(__c: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn fputc_unlocked(__c: ::alpm_t::c_int, __stream: *mut FILE)
     -> ::alpm_t::c_int;
    pub fn putc_unlocked(__c: ::alpm_t::c_int, __stream: *mut FILE)
     -> ::alpm_t::c_int;
    pub fn putchar_unlocked(__c: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn getw(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn putw(__w: ::alpm_t::c_int, __stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn fgets(__s: *mut ::alpm_t::c_char, __n: ::alpm_t::c_int,
                 __stream: *mut FILE) -> *mut ::alpm_t::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::alpm_t::c_char, __n: *mut size_t,
                      __delimiter: ::alpm_t::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::alpm_t::c_char, __n: *mut size_t,
                    __delimiter: ::alpm_t::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::alpm_t::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::alpm_t::c_char, __stream: *mut FILE)
     -> ::alpm_t::c_int;
    pub fn puts(__s: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn ungetc(__c: ::alpm_t::c_int, __stream: *mut FILE)
     -> ::alpm_t::c_int;
    pub fn fread(__ptr: *mut ::alpm_t::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::alpm_t::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::alpm_t::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::alpm_t::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::alpm_t::c_long,
                 __whence: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::alpm_t::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::alpm_t::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::alpm_t::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn perror(__s: *const ::alpm_t::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn popen(__command: *const ::alpm_t::c_char,
                 __modes: *const ::alpm_t::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn ctermid(__s: *mut ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::alpm_t::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
    pub fn mktime(__tp: *mut tm) -> time_t;
    pub fn strftime(__s: *mut ::alpm_t::c_char, __maxsize: size_t,
                    __format: *const ::alpm_t::c_char, __tp: *const tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::alpm_t::c_char, __maxsize: size_t,
                      __format: *const ::alpm_t::c_char, __tp: *const tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
    pub fn localtime(__timer: *const time_t) -> *mut tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
    pub fn asctime(__tp: *const tm) -> *mut ::alpm_t::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::alpm_t::c_char;
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::alpm_t::c_int;
    pub fn timegm(__tp: *mut tm) -> time_t;
    pub fn timelocal(__tp: *mut tm) -> time_t;
    pub fn dysize(__year: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::alpm_t::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::alpm_t::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::alpm_t::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::alpm_t::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::alpm_t::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::alpm_t::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::alpm_t::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::alpm_t::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::alpm_t::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::alpm_t::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::alpm_t::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::alpm_t::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::alpm_t::c_int;
    pub fn timespec_get(__ts: *mut timespec, __base: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::alpm_t::c_char,
                     __endptr: *mut *mut ::alpm_t::c_char,
                     __base: ::alpm_t::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::alpm_t::c_char,
                     __endptr: *mut *mut ::alpm_t::c_char,
                     __base: ::alpm_t::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::alpm_t::c_int)
     -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::alpm_t::c_int)
     -> uintmax_t;
    pub fn access(__name: *const ::alpm_t::c_char, __type: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn faccessat(__fd: ::alpm_t::c_int, __file: *const ::alpm_t::c_char,
                     __type: ::alpm_t::c_int, __flag: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn lseek(__fd: ::alpm_t::c_int, __offset: __off_t,
                 __whence: ::alpm_t::c_int) -> __off_t;
    pub fn close(__fd: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn read(__fd: ::alpm_t::c_int, __buf: *mut ::alpm_t::c_void,
                __nbytes: size_t) -> ssize_t;
    pub fn write(__fd: ::alpm_t::c_int, __buf: *const ::alpm_t::c_void,
                 __n: size_t) -> ssize_t;
    pub fn pread(__fd: ::alpm_t::c_int, __buf: *mut ::alpm_t::c_void,
                 __nbytes: size_t, __offset: __off_t) -> ssize_t;
    pub fn pwrite(__fd: ::alpm_t::c_int, __buf: *const ::alpm_t::c_void,
                  __n: size_t, __offset: __off_t) -> ssize_t;
    pub fn pipe(__pipedes: *mut ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn alarm(__seconds: ::alpm_t::c_uint) -> ::alpm_t::c_uint;
    pub fn sleep(__seconds: ::alpm_t::c_uint) -> ::alpm_t::c_uint;
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t)
     -> __useconds_t;
    pub fn usleep(__useconds: __useconds_t) -> ::alpm_t::c_int;
    pub fn pause() -> ::alpm_t::c_int;
    pub fn chown(__file: *const ::alpm_t::c_char, __owner: __uid_t,
                 __group: __gid_t) -> ::alpm_t::c_int;
    pub fn fchown(__fd: ::alpm_t::c_int, __owner: __uid_t, __group: __gid_t)
     -> ::alpm_t::c_int;
    pub fn lchown(__file: *const ::alpm_t::c_char, __owner: __uid_t,
                  __group: __gid_t) -> ::alpm_t::c_int;
    pub fn fchownat(__fd: ::alpm_t::c_int, __file: *const ::alpm_t::c_char,
                    __owner: __uid_t, __group: __gid_t,
                    __flag: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn chdir(__path: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn fchdir(__fd: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn getcwd(__buf: *mut ::alpm_t::c_char, __size: size_t)
     -> *mut ::alpm_t::c_char;
    pub fn getwd(__buf: *mut ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn dup(__fd: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn dup2(__fd: ::alpm_t::c_int, __fd2: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn execve(__path: *const ::alpm_t::c_char,
                  __argv: *mut *mut ::alpm_t::c_char,
                  __envp: *mut *mut ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn fexecve(__fd: ::alpm_t::c_int, __argv: *mut *mut ::alpm_t::c_char,
                   __envp: *mut *mut ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn execv(__path: *const ::alpm_t::c_char,
                 __argv: *mut *mut ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn execle(__path: *const ::alpm_t::c_char,
                  __arg: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn execl(__path: *const ::alpm_t::c_char,
                 __arg: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn execvp(__file: *const ::alpm_t::c_char,
                  __argv: *mut *mut ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn execlp(__file: *const ::alpm_t::c_char,
                  __arg: *const ::alpm_t::c_char, ...) -> ::alpm_t::c_int;
    pub fn nice(__inc: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn _exit(__status: ::alpm_t::c_int);
    pub fn pathconf(__path: *const ::alpm_t::c_char, __name: ::alpm_t::c_int)
     -> ::alpm_t::c_long;
    pub fn fpathconf(__fd: ::alpm_t::c_int, __name: ::alpm_t::c_int)
     -> ::alpm_t::c_long;
    pub fn sysconf(__name: ::alpm_t::c_int) -> ::alpm_t::c_long;
    pub fn confstr(__name: ::alpm_t::c_int, __buf: *mut ::alpm_t::c_char,
                   __len: size_t) -> size_t;
    pub fn getpid() -> __pid_t;
    pub fn getppid() -> __pid_t;
    pub fn getpgrp() -> __pid_t;
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::alpm_t::c_int;
    pub fn setpgrp() -> ::alpm_t::c_int;
    pub fn setsid() -> __pid_t;
    pub fn getsid(__pid: __pid_t) -> __pid_t;
    pub fn getuid() -> __uid_t;
    pub fn geteuid() -> __uid_t;
    pub fn getgid() -> __gid_t;
    pub fn getegid() -> __gid_t;
    pub fn getgroups(__size: ::alpm_t::c_int, __list: *mut __gid_t)
     -> ::alpm_t::c_int;
    pub fn setuid(__uid: __uid_t) -> ::alpm_t::c_int;
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::alpm_t::c_int;
    pub fn seteuid(__uid: __uid_t) -> ::alpm_t::c_int;
    pub fn setgid(__gid: __gid_t) -> ::alpm_t::c_int;
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::alpm_t::c_int;
    pub fn setegid(__gid: __gid_t) -> ::alpm_t::c_int;
    pub fn fork() -> __pid_t;
    pub fn vfork() -> ::alpm_t::c_int;
    pub fn ttyname(__fd: ::alpm_t::c_int) -> *mut ::alpm_t::c_char;
    pub fn ttyname_r(__fd: ::alpm_t::c_int, __buf: *mut ::alpm_t::c_char,
                     __buflen: size_t) -> ::alpm_t::c_int;
    pub fn isatty(__fd: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn ttyslot() -> ::alpm_t::c_int;
    pub fn link(__from: *const ::alpm_t::c_char,
                __to: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn linkat(__fromfd: ::alpm_t::c_int, __from: *const ::alpm_t::c_char,
                  __tofd: ::alpm_t::c_int, __to: *const ::alpm_t::c_char,
                  __flags: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn symlink(__from: *const ::alpm_t::c_char,
                   __to: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn readlink(__path: *const ::alpm_t::c_char,
                    __buf: *mut ::alpm_t::c_char, __len: size_t) -> ssize_t;
    pub fn symlinkat(__from: *const ::alpm_t::c_char, __tofd: ::alpm_t::c_int,
                     __to: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn readlinkat(__fd: ::alpm_t::c_int, __path: *const ::alpm_t::c_char,
                      __buf: *mut ::alpm_t::c_char, __len: size_t) -> ssize_t;
    pub fn unlink(__name: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn unlinkat(__fd: ::alpm_t::c_int, __name: *const ::alpm_t::c_char,
                    __flag: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn rmdir(__path: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn tcgetpgrp(__fd: ::alpm_t::c_int) -> __pid_t;
    pub fn tcsetpgrp(__fd: ::alpm_t::c_int, __pgrp_id: __pid_t)
     -> ::alpm_t::c_int;
    pub fn getlogin() -> *mut ::alpm_t::c_char;
    pub fn getlogin_r(__name: *mut ::alpm_t::c_char, __name_len: size_t)
     -> ::alpm_t::c_int;
    pub fn setlogin(__name: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn getopt(___argc: ::alpm_t::c_int,
                  ___argv: *const *mut ::alpm_t::c_char,
                  __shortopts: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn gethostname(__name: *mut ::alpm_t::c_char, __len: size_t)
     -> ::alpm_t::c_int;
    pub fn sethostname(__name: *const ::alpm_t::c_char, __len: size_t)
     -> ::alpm_t::c_int;
    pub fn sethostid(__id: ::alpm_t::c_long) -> ::alpm_t::c_int;
    pub fn getdomainname(__name: *mut ::alpm_t::c_char, __len: size_t)
     -> ::alpm_t::c_int;
    pub fn setdomainname(__name: *const ::alpm_t::c_char, __len: size_t)
     -> ::alpm_t::c_int;
    pub fn vhangup() -> ::alpm_t::c_int;
    pub fn revoke(__file: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn profil(__sample_buffer: *mut ::alpm_t::c_ushort, __size: size_t,
                  __offset: size_t, __scale: ::alpm_t::c_uint)
     -> ::alpm_t::c_int;
    pub fn acct(__name: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn getusershell() -> *mut ::alpm_t::c_char;
    pub fn endusershell();
    pub fn setusershell();
    pub fn daemon(__nochdir: ::alpm_t::c_int, __noclose: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn chroot(__path: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn getpass(__prompt: *const ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn fsync(__fd: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn gethostid() -> ::alpm_t::c_long;
    pub fn sync();
    pub fn getpagesize() -> ::alpm_t::c_int;
    pub fn getdtablesize() -> ::alpm_t::c_int;
    pub fn truncate(__file: *const ::alpm_t::c_char, __length: __off_t)
     -> ::alpm_t::c_int;
    pub fn ftruncate(__fd: ::alpm_t::c_int, __length: __off_t)
     -> ::alpm_t::c_int;
    pub fn brk(__addr: *mut ::alpm_t::c_void) -> ::alpm_t::c_int;
    pub fn sbrk(__delta: intptr_t) -> *mut ::alpm_t::c_void;
    pub fn syscall(__sysno: ::alpm_t::c_long, ...) -> ::alpm_t::c_long;
    pub fn lockf(__fd: ::alpm_t::c_int, __cmd: ::alpm_t::c_int,
                 __len: __off_t) -> ::alpm_t::c_int;
    pub fn fdatasync(__fildes: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn archive_version_number() -> ::alpm_t::c_int;
    pub fn archive_version_string() -> *const ::alpm_t::c_char;
    pub fn archive_version_details() -> *const ::alpm_t::c_char;
    pub fn archive_zlib_version() -> *const ::alpm_t::c_char;
    pub fn archive_liblzma_version() -> *const ::alpm_t::c_char;
    pub fn archive_bzlib_version() -> *const ::alpm_t::c_char;
    pub fn archive_liblz4_version() -> *const ::alpm_t::c_char;
    pub fn archive_read_new() -> *mut archive;
    pub fn archive_read_support_compression_all(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_bzip2(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_compress(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_gzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_lzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_lzma(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_none(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_program(arg1: *mut archive,
                                                    command:
                                                        *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_program_signature(arg1:
                                                                  *mut archive,
                                                              arg2:
                                                                  *const ::alpm_t::c_char,
                                                              arg3:
                                                                  *const ::alpm_t::c_void,
                                                              arg4: size_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_rpm(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_uu(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_compression_xz(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_all(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_bzip2(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_compress(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_gzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_grzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_lrzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_lz4(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_lzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_lzma(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_lzop(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_none(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_program(arg1: *mut archive,
                                               command:
                                                   *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_program_signature(arg1: *mut archive,
                                                         arg2:
                                                             *const ::alpm_t::c_char,
                                                         arg3:
                                                             *const ::alpm_t::c_void,
                                                         arg4: size_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_rpm(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_uu(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_filter_xz(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_7zip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_all(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_ar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_by_code(arg1: *mut archive,
                                               arg2: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_cab(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_cpio(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_empty(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_gnutar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_iso9660(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_lha(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_mtree(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_rar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_raw(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_tar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_warc(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_xar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_zip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_zip_streamable(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_support_format_zip_seekable(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_format(arg1: *mut archive, arg2: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_read_append_filter(arg1: *mut archive,
                                      arg2: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_read_append_filter_program(arg1: *mut archive,
                                              arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_append_filter_program_signature(arg1: *mut archive,
                                                        arg2:
                                                            *const ::alpm_t::c_char,
                                                        arg3:
                                                            *const ::alpm_t::c_void,
                                                        arg4: size_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_open_callback(arg1: *mut archive,
                                          arg2: archive_open_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_read_callback(arg1: *mut archive,
                                          arg2: archive_read_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_seek_callback(arg1: *mut archive,
                                          arg2: archive_seek_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_skip_callback(arg1: *mut archive,
                                          arg2: archive_skip_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_close_callback(arg1: *mut archive,
                                           arg2: archive_close_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_switch_callback(arg1: *mut archive,
                                            arg2: archive_switch_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_callback_data(arg1: *mut archive,
                                          arg2: *mut ::alpm_t::c_void)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_callback_data2(arg1: *mut archive,
                                           arg2: *mut ::alpm_t::c_void,
                                           arg3: ::alpm_t::c_uint)
     -> ::alpm_t::c_int;
    pub fn archive_read_add_callback_data(arg1: *mut archive,
                                          arg2: *mut ::alpm_t::c_void,
                                          arg3: ::alpm_t::c_uint)
     -> ::alpm_t::c_int;
    pub fn archive_read_append_callback_data(arg1: *mut archive,
                                             arg2: *mut ::alpm_t::c_void)
     -> ::alpm_t::c_int;
    pub fn archive_read_prepend_callback_data(arg1: *mut archive,
                                              arg2: *mut ::alpm_t::c_void)
     -> ::alpm_t::c_int;
    pub fn archive_read_open1(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_read_open(arg1: *mut archive,
                             _client_data: *mut ::alpm_t::c_void,
                             arg2: archive_open_callback,
                             arg3: archive_read_callback,
                             arg4: archive_close_callback) -> ::alpm_t::c_int;
    pub fn archive_read_open2(arg1: *mut archive,
                              _client_data: *mut ::alpm_t::c_void,
                              arg2: archive_open_callback,
                              arg3: archive_read_callback,
                              arg4: archive_skip_callback,
                              arg5: archive_close_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_open_filename(arg1: *mut archive,
                                      _filename: *const ::alpm_t::c_char,
                                      _block_size: size_t) -> ::alpm_t::c_int;
    pub fn archive_read_open_filenames(arg1: *mut archive,
                                       _filenames:
                                           *mut *const ::alpm_t::c_char,
                                       _block_size: size_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_open_filename_w(arg1: *mut archive,
                                        _filename: *const wchar_t,
                                        _block_size: size_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_open_file(arg1: *mut archive,
                                  _filename: *const ::alpm_t::c_char,
                                  _block_size: size_t) -> ::alpm_t::c_int;
    pub fn archive_read_open_memory(arg1: *mut archive,
                                    buff: *const ::alpm_t::c_void,
                                    size: size_t) -> ::alpm_t::c_int;
    pub fn archive_read_open_memory2(a: *mut archive,
                                     buff: *const ::alpm_t::c_void,
                                     size: size_t, read_size: size_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_open_fd(arg1: *mut archive, _fd: ::alpm_t::c_int,
                                _block_size: size_t) -> ::alpm_t::c_int;
    pub fn archive_read_open_FILE(arg1: *mut archive, _file: *mut FILE)
     -> ::alpm_t::c_int;
    pub fn archive_read_next_header(arg1: *mut archive,
                                    arg2: *mut *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_read_next_header2(arg1: *mut archive,
                                     arg2: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_read_header_position(arg1: *mut archive) -> la_int64_t;
    pub fn archive_read_has_encrypted_entries(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_format_capabilities(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_data(arg1: *mut archive, arg2: *mut ::alpm_t::c_void,
                             arg3: size_t) -> la_ssize_t;
    pub fn archive_seek_data(arg1: *mut archive, arg2: la_int64_t,
                             arg3: ::alpm_t::c_int) -> la_int64_t;
    pub fn archive_read_data_block(a: *mut archive,
                                   buff: *mut *const ::alpm_t::c_void,
                                   size: *mut size_t, offset: *mut la_int64_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_data_skip(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_read_data_into_fd(arg1: *mut archive, fd: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_format_option(_a: *mut archive,
                                          m: *const ::alpm_t::c_char,
                                          o: *const ::alpm_t::c_char,
                                          v: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_filter_option(_a: *mut archive,
                                          m: *const ::alpm_t::c_char,
                                          o: *const ::alpm_t::c_char,
                                          v: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_option(_a: *mut archive,
                                   m: *const ::alpm_t::c_char,
                                   o: *const ::alpm_t::c_char,
                                   v: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_options(_a: *mut archive,
                                    opts: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_add_passphrase(arg1: *mut archive,
                                       arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_set_passphrase_callback(arg1: *mut archive,
                                                client_data:
                                                    *mut ::alpm_t::c_void,
                                                arg2:
                                                    archive_passphrase_callback)
     -> ::alpm_t::c_int;
    pub fn archive_read_extract(arg1: *mut archive, arg2: *mut archive_entry,
                                flags: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn archive_read_extract2(arg1: *mut archive, arg2: *mut archive_entry,
                                 arg3: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_read_extract_set_progress_callback(arg1: *mut archive,
                                                      _progress_func:
                                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                         *mut ::alpm_t::c_void)>,
                                                      _user_data:
                                                          *mut ::alpm_t::c_void);
    pub fn archive_read_extract_set_skip_file(arg1: *mut archive,
                                              arg2: la_int64_t,
                                              arg3: la_int64_t);
    pub fn archive_read_close(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_read_free(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_read_finish(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_write_new() -> *mut archive;
    pub fn archive_write_set_bytes_per_block(arg1: *mut archive,
                                             bytes_per_block: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_write_get_bytes_per_block(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_bytes_in_last_block(arg1: *mut archive,
                                                 bytes_in_last_block:
                                                     ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_write_get_bytes_in_last_block(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_skip_file(arg1: *mut archive, arg2: la_int64_t,
                                       arg3: la_int64_t) -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_bzip2(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_compress(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_gzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_lzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_lzma(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_none(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_program(arg1: *mut archive,
                                                 cmd: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_compression_xz(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter(arg1: *mut archive,
                                    filter_code: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_by_name(arg1: *mut archive,
                                            name: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_b64encode(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_bzip2(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_compress(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_grzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_gzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_lrzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_lz4(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_lzip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_lzma(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_lzop(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_none(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_program(arg1: *mut archive,
                                            cmd: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_uuencode(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_add_filter_xz(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_write_set_format(arg1: *mut archive,
                                    format_code: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_by_name(arg1: *mut archive,
                                            name: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_7zip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_ar_bsd(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_ar_svr4(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_cpio(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_cpio_newc(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_gnutar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_iso9660(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_mtree(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_mtree_classic(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_pax(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_pax_restricted(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_raw(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_shar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_shar_dump(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_ustar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_v7tar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_warc(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_xar(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_zip(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_filter_by_ext(a: *mut archive,
                                                  filename:
                                                      *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_format_filter_by_ext_def(a: *mut archive,
                                                      filename:
                                                          *const ::alpm_t::c_char,
                                                      def_ext:
                                                          *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_zip_set_compression_deflate(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_zip_set_compression_store(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_open(arg1: *mut archive, arg2: *mut ::alpm_t::c_void,
                              arg3: archive_open_callback,
                              arg4: archive_write_callback,
                              arg5: archive_close_callback)
     -> ::alpm_t::c_int;
    pub fn archive_write_open_fd(arg1: *mut archive, _fd: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_write_open_filename(arg1: *mut archive,
                                       _file: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_open_filename_w(arg1: *mut archive,
                                         _file: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_write_open_file(arg1: *mut archive,
                                   _file: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_open_FILE(arg1: *mut archive, arg2: *mut FILE)
     -> ::alpm_t::c_int;
    pub fn archive_write_open_memory(arg1: *mut archive,
                                     _buffer: *mut ::alpm_t::c_void,
                                     _buffSize: size_t, _used: *mut size_t)
     -> ::alpm_t::c_int;
    pub fn archive_write_header(arg1: *mut archive, arg2: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_write_data(arg1: *mut archive,
                              arg2: *const ::alpm_t::c_void, arg3: size_t)
     -> la_ssize_t;
    pub fn archive_write_data_block(arg1: *mut archive,
                                    arg2: *const ::alpm_t::c_void,
                                    arg3: size_t, arg4: la_int64_t)
     -> la_ssize_t;
    pub fn archive_write_finish_entry(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_write_close(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_write_fail(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_write_free(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_write_finish(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_write_set_format_option(_a: *mut archive,
                                           m: *const ::alpm_t::c_char,
                                           o: *const ::alpm_t::c_char,
                                           v: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_filter_option(_a: *mut archive,
                                           m: *const ::alpm_t::c_char,
                                           o: *const ::alpm_t::c_char,
                                           v: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_option(_a: *mut archive,
                                    m: *const ::alpm_t::c_char,
                                    o: *const ::alpm_t::c_char,
                                    v: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_options(_a: *mut archive,
                                     opts: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_passphrase(_a: *mut archive,
                                        p: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_write_set_passphrase_callback(arg1: *mut archive,
                                                 client_data:
                                                     *mut ::alpm_t::c_void,
                                                 arg2:
                                                     archive_passphrase_callback)
     -> ::alpm_t::c_int;
    pub fn archive_write_disk_new() -> *mut archive;
    pub fn archive_write_disk_set_skip_file(arg1: *mut archive,
                                            arg2: la_int64_t,
                                            arg3: la_int64_t)
     -> ::alpm_t::c_int;
    pub fn archive_write_disk_set_options(arg1: *mut archive,
                                          flags: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_write_disk_set_standard_lookup(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_write_disk_set_group_lookup(arg1: *mut archive,
                                               arg2: *mut ::alpm_t::c_void,
                                               arg3:
                                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *mut ::alpm_t::c_void,
                                                                                              arg2:
                                                                                                  *const ::alpm_t::c_char,
                                                                                              arg3:
                                                                                                  la_int64_t)
                                                                             ->
                                                                                 la_int64_t>,
                                               arg4:
                                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *mut ::alpm_t::c_void)>)
     -> ::alpm_t::c_int;
    pub fn archive_write_disk_set_user_lookup(arg1: *mut archive,
                                              arg2: *mut ::alpm_t::c_void,
                                              arg3:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::alpm_t::c_void,
                                                                                             arg2:
                                                                                                 *const ::alpm_t::c_char,
                                                                                             arg3:
                                                                                                 la_int64_t)
                                                                            ->
                                                                                la_int64_t>,
                                              arg4:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::alpm_t::c_void)>)
     -> ::alpm_t::c_int;
    pub fn archive_write_disk_gid(arg1: *mut archive,
                                  arg2: *const ::alpm_t::c_char,
                                  arg3: la_int64_t) -> la_int64_t;
    pub fn archive_write_disk_uid(arg1: *mut archive,
                                  arg2: *const ::alpm_t::c_char,
                                  arg3: la_int64_t) -> la_int64_t;
    pub fn archive_read_disk_new() -> *mut archive;
    pub fn archive_read_disk_set_symlink_logical(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_symlink_physical(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_symlink_hybrid(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_entry_from_file(arg1: *mut archive,
                                             arg2: *mut archive_entry,
                                             arg3: ::alpm_t::c_int,
                                             arg4: *const stat)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_gname(arg1: *mut archive, arg2: la_int64_t)
     -> *const ::alpm_t::c_char;
    pub fn archive_read_disk_uname(arg1: *mut archive, arg2: la_int64_t)
     -> *const ::alpm_t::c_char;
    pub fn archive_read_disk_set_standard_lookup(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_gname_lookup(arg1: *mut archive,
                                              arg2: *mut ::alpm_t::c_void,
                                              arg3:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::alpm_t::c_void,
                                                                                             arg2:
                                                                                                 la_int64_t)
                                                                            ->
                                                                                *const ::alpm_t::c_char>,
                                              arg4:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::alpm_t::c_void)>)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_uname_lookup(arg1: *mut archive,
                                              arg2: *mut ::alpm_t::c_void,
                                              arg3:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::alpm_t::c_void,
                                                                                             arg2:
                                                                                                 la_int64_t)
                                                                            ->
                                                                                *const ::alpm_t::c_char>,
                                              arg4:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::alpm_t::c_void)>)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_open(arg1: *mut archive,
                                  arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_open_w(arg1: *mut archive, arg2: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_descend(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_read_disk_can_descend(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_current_filesystem(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_current_filesystem_is_synthetic(arg1:
                                                                 *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_current_filesystem_is_remote(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_atime_restored(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_behavior(arg1: *mut archive,
                                          flags: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_matching(arg1: *mut archive,
                                          _matching: *mut archive,
                                          _excluded_func:
                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                             *mut archive,
                                                                                         arg2:
                                                                                             *mut ::alpm_t::c_void,
                                                                                         arg3:
                                                                                             *mut archive_entry)>,
                                          _client_data: *mut ::alpm_t::c_void)
     -> ::alpm_t::c_int;
    pub fn archive_read_disk_set_metadata_filter_callback(arg1: *mut archive,
                                                          _metadata_filter_func:
                                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                             *mut archive,
                                                                                                         arg2:
                                                                                                             *mut ::alpm_t::c_void,
                                                                                                         arg3:
                                                                                                             *mut archive_entry)
                                                                                        ->
                                                                                            ::alpm_t::c_int>,
                                                          _client_data:
                                                              *mut ::alpm_t::c_void)
     -> ::alpm_t::c_int;
    pub fn archive_free(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_filter_count(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_filter_bytes(arg1: *mut archive, arg2: ::alpm_t::c_int)
     -> la_int64_t;
    pub fn archive_filter_code(arg1: *mut archive, arg2: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_filter_name(arg1: *mut archive, arg2: ::alpm_t::c_int)
     -> *const ::alpm_t::c_char;
    pub fn archive_position_compressed(arg1: *mut archive) -> la_int64_t;
    pub fn archive_position_uncompressed(arg1: *mut archive) -> la_int64_t;
    pub fn archive_compression_name(arg1: *mut archive)
     -> *const ::alpm_t::c_char;
    pub fn archive_compression(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_errno(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_error_string(arg1: *mut archive)
     -> *const ::alpm_t::c_char;
    pub fn archive_format_name(arg1: *mut archive) -> *const ::alpm_t::c_char;
    pub fn archive_format(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_clear_error(arg1: *mut archive);
    pub fn archive_set_error(arg1: *mut archive, _err: ::alpm_t::c_int,
                             fmt: *const ::alpm_t::c_char, ...);
    pub fn archive_copy_error(dest: *mut archive, src: *mut archive);
    pub fn archive_file_count(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_match_new() -> *mut archive;
    pub fn archive_match_free(arg1: *mut archive) -> ::alpm_t::c_int;
    pub fn archive_match_excluded(arg1: *mut archive,
                                  arg2: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_match_path_excluded(arg1: *mut archive,
                                       arg2: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_match_exclude_pattern(arg1: *mut archive,
                                         arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_match_exclude_pattern_w(arg1: *mut archive,
                                           arg2: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_exclude_pattern_from_file(arg1: *mut archive,
                                                   arg2:
                                                       *const ::alpm_t::c_char,
                                                   _nullSeparator:
                                                       ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_match_exclude_pattern_from_file_w(arg1: *mut archive,
                                                     arg2: *const wchar_t,
                                                     _nullSeparator:
                                                         ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_pattern(arg1: *mut archive,
                                         arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_pattern_w(arg1: *mut archive,
                                           arg2: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_pattern_from_file(arg1: *mut archive,
                                                   arg2:
                                                       *const ::alpm_t::c_char,
                                                   _nullSeparator:
                                                       ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_pattern_from_file_w(arg1: *mut archive,
                                                     arg2: *const wchar_t,
                                                     _nullSeparator:
                                                         ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn archive_match_path_unmatched_inclusions(arg1: *mut archive)
     -> ::alpm_t::c_int;
    pub fn archive_match_path_unmatched_inclusions_next(arg1: *mut archive,
                                                        arg2:
                                                            *mut *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_match_path_unmatched_inclusions_next_w(arg1: *mut archive,
                                                          arg2:
                                                              *mut *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_time_excluded(arg1: *mut archive,
                                       arg2: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_time(arg1: *mut archive,
                                      _flag: ::alpm_t::c_int, _sec: time_t,
                                      _nsec: ::alpm_t::c_long)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_date(arg1: *mut archive,
                                      _flag: ::alpm_t::c_int,
                                      _datestr: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_date_w(arg1: *mut archive,
                                        _flag: ::alpm_t::c_int,
                                        _datestr: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_file_time(arg1: *mut archive,
                                           _flag: ::alpm_t::c_int,
                                           _pathname: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_file_time_w(arg1: *mut archive,
                                             _flag: ::alpm_t::c_int,
                                             _pathname: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_exclude_entry(arg1: *mut archive,
                                       _flag: ::alpm_t::c_int,
                                       arg2: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_match_owner_excluded(arg1: *mut archive,
                                        arg2: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_uid(arg1: *mut archive, arg2: la_int64_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_gid(arg1: *mut archive, arg2: la_int64_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_uname(arg1: *mut archive,
                                       arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_uname_w(arg1: *mut archive,
                                         arg2: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_gname(arg1: *mut archive,
                                       arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_match_include_gname_w(arg1: *mut archive,
                                         arg2: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_utility_string_sort(arg1: *mut *mut ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_clear(arg1: *mut archive_entry)
     -> *mut archive_entry;
    pub fn archive_entry_clone(arg1: *mut archive_entry)
     -> *mut archive_entry;
    pub fn archive_entry_free(arg1: *mut archive_entry);
    pub fn archive_entry_new() -> *mut archive_entry;
    pub fn archive_entry_new2(arg1: *mut archive) -> *mut archive_entry;
    pub fn archive_entry_atime(arg1: *mut archive_entry) -> time_t;
    pub fn archive_entry_atime_nsec(arg1: *mut archive_entry)
     -> ::alpm_t::c_long;
    pub fn archive_entry_atime_is_set(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_birthtime(arg1: *mut archive_entry) -> time_t;
    pub fn archive_entry_birthtime_nsec(arg1: *mut archive_entry)
     -> ::alpm_t::c_long;
    pub fn archive_entry_birthtime_is_set(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_ctime(arg1: *mut archive_entry) -> time_t;
    pub fn archive_entry_ctime_nsec(arg1: *mut archive_entry)
     -> ::alpm_t::c_long;
    pub fn archive_entry_ctime_is_set(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_dev(arg1: *mut archive_entry) -> dev_t;
    pub fn archive_entry_dev_is_set(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_devmajor(arg1: *mut archive_entry) -> dev_t;
    pub fn archive_entry_devminor(arg1: *mut archive_entry) -> dev_t;
    pub fn archive_entry_filetype(arg1: *mut archive_entry) -> mode_t;
    pub fn archive_entry_fflags(arg1: *mut archive_entry,
                                arg2: *mut ::alpm_t::c_ulong,
                                arg3: *mut ::alpm_t::c_ulong);
    pub fn archive_entry_fflags_text(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_gid(arg1: *mut archive_entry) -> la_int64_t;
    pub fn archive_entry_gname(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_gname_utf8(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_gname_w(arg1: *mut archive_entry) -> *const wchar_t;
    pub fn archive_entry_hardlink(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_hardlink_utf8(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_hardlink_w(arg1: *mut archive_entry)
     -> *const wchar_t;
    pub fn archive_entry_ino(arg1: *mut archive_entry) -> la_int64_t;
    pub fn archive_entry_ino64(arg1: *mut archive_entry) -> la_int64_t;
    pub fn archive_entry_ino_is_set(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_mode(arg1: *mut archive_entry) -> mode_t;
    pub fn archive_entry_mtime(arg1: *mut archive_entry) -> time_t;
    pub fn archive_entry_mtime_nsec(arg1: *mut archive_entry)
     -> ::alpm_t::c_long;
    pub fn archive_entry_mtime_is_set(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_nlink(arg1: *mut archive_entry) -> ::alpm_t::c_uint;
    pub fn archive_entry_pathname(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_pathname_utf8(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_pathname_w(arg1: *mut archive_entry)
     -> *const wchar_t;
    pub fn archive_entry_perm(arg1: *mut archive_entry) -> mode_t;
    pub fn archive_entry_rdev(arg1: *mut archive_entry) -> dev_t;
    pub fn archive_entry_rdevmajor(arg1: *mut archive_entry) -> dev_t;
    pub fn archive_entry_rdevminor(arg1: *mut archive_entry) -> dev_t;
    pub fn archive_entry_sourcepath(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_sourcepath_w(arg1: *mut archive_entry)
     -> *const wchar_t;
    pub fn archive_entry_size(arg1: *mut archive_entry) -> la_int64_t;
    pub fn archive_entry_size_is_set(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_strmode(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_symlink(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_symlink_utf8(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_symlink_w(arg1: *mut archive_entry)
     -> *const wchar_t;
    pub fn archive_entry_uid(arg1: *mut archive_entry) -> la_int64_t;
    pub fn archive_entry_uname(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_uname_utf8(arg1: *mut archive_entry)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_uname_w(arg1: *mut archive_entry) -> *const wchar_t;
    pub fn archive_entry_is_data_encrypted(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_is_metadata_encrypted(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_is_encrypted(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_set_atime(arg1: *mut archive_entry, arg2: time_t,
                                   arg3: ::alpm_t::c_long);
    pub fn archive_entry_unset_atime(arg1: *mut archive_entry);
    pub fn archive_entry_set_birthtime(arg1: *mut archive_entry, arg2: time_t,
                                       arg3: ::alpm_t::c_long);
    pub fn archive_entry_unset_birthtime(arg1: *mut archive_entry);
    pub fn archive_entry_set_ctime(arg1: *mut archive_entry, arg2: time_t,
                                   arg3: ::alpm_t::c_long);
    pub fn archive_entry_unset_ctime(arg1: *mut archive_entry);
    pub fn archive_entry_set_dev(arg1: *mut archive_entry, arg2: dev_t);
    pub fn archive_entry_set_devmajor(arg1: *mut archive_entry, arg2: dev_t);
    pub fn archive_entry_set_devminor(arg1: *mut archive_entry, arg2: dev_t);
    pub fn archive_entry_set_filetype(arg1: *mut archive_entry,
                                      arg2: ::alpm_t::c_uint);
    pub fn archive_entry_set_fflags(arg1: *mut archive_entry,
                                    arg2: ::alpm_t::c_ulong,
                                    arg3: ::alpm_t::c_ulong);
    pub fn archive_entry_copy_fflags_text(arg1: *mut archive_entry,
                                          arg2: *const ::alpm_t::c_char)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_copy_fflags_text_w(arg1: *mut archive_entry,
                                            arg2: *const wchar_t)
     -> *const wchar_t;
    pub fn archive_entry_set_gid(arg1: *mut archive_entry, arg2: la_int64_t);
    pub fn archive_entry_set_gname(arg1: *mut archive_entry,
                                   arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_set_gname_utf8(arg1: *mut archive_entry,
                                        arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_gname(arg1: *mut archive_entry,
                                    arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_gname_w(arg1: *mut archive_entry,
                                      arg2: *const wchar_t);
    pub fn archive_entry_update_gname_utf8(arg1: *mut archive_entry,
                                           arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_set_hardlink(arg1: *mut archive_entry,
                                      arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_set_hardlink_utf8(arg1: *mut archive_entry,
                                           arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_hardlink(arg1: *mut archive_entry,
                                       arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_hardlink_w(arg1: *mut archive_entry,
                                         arg2: *const wchar_t);
    pub fn archive_entry_update_hardlink_utf8(arg1: *mut archive_entry,
                                              arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_set_ino(arg1: *mut archive_entry, arg2: la_int64_t);
    pub fn archive_entry_set_ino64(arg1: *mut archive_entry,
                                   arg2: la_int64_t);
    pub fn archive_entry_set_link(arg1: *mut archive_entry,
                                  arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_set_link_utf8(arg1: *mut archive_entry,
                                       arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_link(arg1: *mut archive_entry,
                                   arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_link_w(arg1: *mut archive_entry,
                                     arg2: *const wchar_t);
    pub fn archive_entry_update_link_utf8(arg1: *mut archive_entry,
                                          arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_set_mode(arg1: *mut archive_entry, arg2: mode_t);
    pub fn archive_entry_set_mtime(arg1: *mut archive_entry, arg2: time_t,
                                   arg3: ::alpm_t::c_long);
    pub fn archive_entry_unset_mtime(arg1: *mut archive_entry);
    pub fn archive_entry_set_nlink(arg1: *mut archive_entry,
                                   arg2: ::alpm_t::c_uint);
    pub fn archive_entry_set_pathname(arg1: *mut archive_entry,
                                      arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_set_pathname_utf8(arg1: *mut archive_entry,
                                           arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_pathname(arg1: *mut archive_entry,
                                       arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_pathname_w(arg1: *mut archive_entry,
                                         arg2: *const wchar_t);
    pub fn archive_entry_update_pathname_utf8(arg1: *mut archive_entry,
                                              arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_set_perm(arg1: *mut archive_entry, arg2: mode_t);
    pub fn archive_entry_set_rdev(arg1: *mut archive_entry, arg2: dev_t);
    pub fn archive_entry_set_rdevmajor(arg1: *mut archive_entry, arg2: dev_t);
    pub fn archive_entry_set_rdevminor(arg1: *mut archive_entry, arg2: dev_t);
    pub fn archive_entry_set_size(arg1: *mut archive_entry, arg2: la_int64_t);
    pub fn archive_entry_unset_size(arg1: *mut archive_entry);
    pub fn archive_entry_copy_sourcepath(arg1: *mut archive_entry,
                                         arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_sourcepath_w(arg1: *mut archive_entry,
                                           arg2: *const wchar_t);
    pub fn archive_entry_set_symlink(arg1: *mut archive_entry,
                                     arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_set_symlink_utf8(arg1: *mut archive_entry,
                                          arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_symlink(arg1: *mut archive_entry,
                                      arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_symlink_w(arg1: *mut archive_entry,
                                        arg2: *const wchar_t);
    pub fn archive_entry_update_symlink_utf8(arg1: *mut archive_entry,
                                             arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_set_uid(arg1: *mut archive_entry, arg2: la_int64_t);
    pub fn archive_entry_set_uname(arg1: *mut archive_entry,
                                   arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_set_uname_utf8(arg1: *mut archive_entry,
                                        arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_uname(arg1: *mut archive_entry,
                                    arg2: *const ::alpm_t::c_char);
    pub fn archive_entry_copy_uname_w(arg1: *mut archive_entry,
                                      arg2: *const wchar_t);
    pub fn archive_entry_update_uname_utf8(arg1: *mut archive_entry,
                                           arg2: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_set_is_data_encrypted(arg1: *mut archive_entry,
                                               is_encrypted:
                                                   ::alpm_t::c_char);
    pub fn archive_entry_set_is_metadata_encrypted(arg1: *mut archive_entry,
                                                   is_encrypted:
                                                       ::alpm_t::c_char);
    pub fn archive_entry_stat(arg1: *mut archive_entry) -> *const stat;
    pub fn archive_entry_copy_stat(arg1: *mut archive_entry,
                                   arg2: *const stat);
    pub fn archive_entry_mac_metadata(arg1: *mut archive_entry,
                                      arg2: *mut size_t)
     -> *const ::alpm_t::c_void;
    pub fn archive_entry_copy_mac_metadata(arg1: *mut archive_entry,
                                           arg2: *const ::alpm_t::c_void,
                                           arg3: size_t);
    pub fn archive_entry_acl_clear(arg1: *mut archive_entry);
    pub fn archive_entry_acl_add_entry(arg1: *mut archive_entry,
                                       arg2: ::alpm_t::c_int,
                                       arg3: ::alpm_t::c_int,
                                       arg4: ::alpm_t::c_int,
                                       arg5: ::alpm_t::c_int,
                                       arg6: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_acl_add_entry_w(arg1: *mut archive_entry,
                                         arg2: ::alpm_t::c_int,
                                         arg3: ::alpm_t::c_int,
                                         arg4: ::alpm_t::c_int,
                                         arg5: ::alpm_t::c_int,
                                         arg6: *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_entry_acl_reset(arg1: *mut archive_entry,
                                   arg2: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn archive_entry_acl_next(arg1: *mut archive_entry,
                                  arg2: ::alpm_t::c_int,
                                  arg3: *mut ::alpm_t::c_int,
                                  arg4: *mut ::alpm_t::c_int,
                                  arg5: *mut ::alpm_t::c_int,
                                  arg6: *mut ::alpm_t::c_int,
                                  arg7: *mut *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn archive_entry_acl_next_w(arg1: *mut archive_entry,
                                    arg2: ::alpm_t::c_int,
                                    arg3: *mut ::alpm_t::c_int,
                                    arg4: *mut ::alpm_t::c_int,
                                    arg5: *mut ::alpm_t::c_int,
                                    arg6: *mut ::alpm_t::c_int,
                                    arg7: *mut *const wchar_t)
     -> ::alpm_t::c_int;
    pub fn archive_entry_acl_text_w(arg1: *mut archive_entry,
                                    arg2: ::alpm_t::c_int) -> *const wchar_t;
    pub fn archive_entry_acl_text(arg1: *mut archive_entry,
                                  arg2: ::alpm_t::c_int)
     -> *const ::alpm_t::c_char;
    pub fn archive_entry_acl_count(arg1: *mut archive_entry,
                                   arg2: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn archive_entry_acl(arg1: *mut archive_entry) -> *mut archive_acl;
    pub fn archive_entry_xattr_clear(arg1: *mut archive_entry);
    pub fn archive_entry_xattr_add_entry(arg1: *mut archive_entry,
                                         arg2: *const ::alpm_t::c_char,
                                         arg3: *const ::alpm_t::c_void,
                                         arg4: size_t);
    pub fn archive_entry_xattr_count(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_xattr_reset(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_xattr_next(arg1: *mut archive_entry,
                                    arg2: *mut *const ::alpm_t::c_char,
                                    arg3: *mut *const ::alpm_t::c_void,
                                    arg4: *mut size_t) -> ::alpm_t::c_int;
    pub fn archive_entry_sparse_clear(arg1: *mut archive_entry);
    pub fn archive_entry_sparse_add_entry(arg1: *mut archive_entry,
                                          arg2: la_int64_t, arg3: la_int64_t);
    pub fn archive_entry_sparse_count(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_sparse_reset(arg1: *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn archive_entry_sparse_next(arg1: *mut archive_entry,
                                     arg2: *mut la_int64_t,
                                     arg3: *mut la_int64_t)
     -> ::alpm_t::c_int;
    pub fn archive_entry_linkresolver_new()
     -> *mut archive_entry_linkresolver;
    pub fn archive_entry_linkresolver_set_strategy(arg1:
                                                       *mut archive_entry_linkresolver,
                                                   arg2: ::alpm_t::c_int);
    pub fn archive_entry_linkresolver_free(arg1:
                                               *mut archive_entry_linkresolver);
    pub fn archive_entry_linkify(arg1: *mut archive_entry_linkresolver,
                                 arg2: *mut *mut archive_entry,
                                 arg3: *mut *mut archive_entry);
    pub fn archive_entry_partial_links(res: *mut archive_entry_linkresolver,
                                       links: *mut ::alpm_t::c_uint)
     -> *mut archive_entry;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::alpm_t::c_char) -> f64;
    pub fn atoi(__nptr: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn atol(__nptr: *const ::alpm_t::c_char) -> ::alpm_t::c_long;
    pub fn atoll(__nptr: *const ::alpm_t::c_char) -> ::alpm_t::c_longlong;
    pub fn strtod(__nptr: *const ::alpm_t::c_char,
                  __endptr: *mut *mut ::alpm_t::c_char) -> f64;
    pub fn strtof(__nptr: *const ::alpm_t::c_char,
                  __endptr: *mut *mut ::alpm_t::c_char) -> f32;
    pub fn strtold(__nptr: *const ::alpm_t::c_char,
                   __endptr: *mut *mut ::alpm_t::c_char) -> f64;
    pub fn strtol(__nptr: *const ::alpm_t::c_char,
                  __endptr: *mut *mut ::alpm_t::c_char,
                  __base: ::alpm_t::c_int) -> ::alpm_t::c_long;
    pub fn strtoul(__nptr: *const ::alpm_t::c_char,
                   __endptr: *mut *mut ::alpm_t::c_char,
                   __base: ::alpm_t::c_int) -> ::alpm_t::c_ulong;
    pub fn strtoq(__nptr: *const ::alpm_t::c_char,
                  __endptr: *mut *mut ::alpm_t::c_char,
                  __base: ::alpm_t::c_int) -> ::alpm_t::c_longlong;
    pub fn strtouq(__nptr: *const ::alpm_t::c_char,
                   __endptr: *mut *mut ::alpm_t::c_char,
                   __base: ::alpm_t::c_int) -> ::alpm_t::c_ulonglong;
    pub fn strtoll(__nptr: *const ::alpm_t::c_char,
                   __endptr: *mut *mut ::alpm_t::c_char,
                   __base: ::alpm_t::c_int) -> ::alpm_t::c_longlong;
    pub fn strtoull(__nptr: *const ::alpm_t::c_char,
                    __endptr: *mut *mut ::alpm_t::c_char,
                    __base: ::alpm_t::c_int) -> ::alpm_t::c_ulonglong;
    pub fn l64a(__n: ::alpm_t::c_long) -> *mut ::alpm_t::c_char;
    pub fn a64l(__s: *const ::alpm_t::c_char) -> ::alpm_t::c_long;
    pub fn random() -> ::alpm_t::c_long;
    pub fn srandom(__seed: ::alpm_t::c_uint);
    pub fn initstate(__seed: ::alpm_t::c_uint,
                     __statebuf: *mut ::alpm_t::c_char, __statelen: size_t)
     -> *mut ::alpm_t::c_char;
    pub fn setstate(__statebuf: *mut ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::alpm_t::c_int;
    pub fn srandom_r(__seed: ::alpm_t::c_uint, __buf: *mut random_data)
     -> ::alpm_t::c_int;
    pub fn initstate_r(__seed: ::alpm_t::c_uint,
                       __statebuf: *mut ::alpm_t::c_char, __statelen: size_t,
                       __buf: *mut random_data) -> ::alpm_t::c_int;
    pub fn setstate_r(__statebuf: *mut ::alpm_t::c_char,
                      __buf: *mut random_data) -> ::alpm_t::c_int;
    pub fn rand() -> ::alpm_t::c_int;
    pub fn srand(__seed: ::alpm_t::c_uint);
    pub fn rand_r(__seed: *mut ::alpm_t::c_uint) -> ::alpm_t::c_int;
    pub fn drand48() -> f64;
    pub fn erand48(__xsubi: *mut ::alpm_t::c_ushort) -> f64;
    pub fn lrand48() -> ::alpm_t::c_long;
    pub fn nrand48(__xsubi: *mut ::alpm_t::c_ushort) -> ::alpm_t::c_long;
    pub fn mrand48() -> ::alpm_t::c_long;
    pub fn jrand48(__xsubi: *mut ::alpm_t::c_ushort) -> ::alpm_t::c_long;
    pub fn srand48(__seedval: ::alpm_t::c_long);
    pub fn seed48(__seed16v: *mut ::alpm_t::c_ushort)
     -> *mut ::alpm_t::c_ushort;
    pub fn lcong48(__param: *mut ::alpm_t::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::alpm_t::c_int;
    pub fn erand48_r(__xsubi: *mut ::alpm_t::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::alpm_t::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::alpm_t::c_long) -> ::alpm_t::c_int;
    pub fn nrand48_r(__xsubi: *mut ::alpm_t::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::alpm_t::c_long) -> ::alpm_t::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::alpm_t::c_long) -> ::alpm_t::c_int;
    pub fn jrand48_r(__xsubi: *mut ::alpm_t::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::alpm_t::c_long) -> ::alpm_t::c_int;
    pub fn srand48_r(__seedval: ::alpm_t::c_long, __buffer: *mut drand48_data)
     -> ::alpm_t::c_int;
    pub fn seed48_r(__seed16v: *mut ::alpm_t::c_ushort,
                    __buffer: *mut drand48_data) -> ::alpm_t::c_int;
    pub fn lcong48_r(__param: *mut ::alpm_t::c_ushort,
                     __buffer: *mut drand48_data) -> ::alpm_t::c_int;
    pub fn malloc(__size: size_t) -> *mut ::alpm_t::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::alpm_t::c_void;
    pub fn realloc(__ptr: *mut ::alpm_t::c_void, __size: size_t)
     -> *mut ::alpm_t::c_void;
    pub fn free(__ptr: *mut ::alpm_t::c_void);
    pub fn cfree(__ptr: *mut ::alpm_t::c_void);
    pub fn alloca(__size: size_t) -> *mut ::alpm_t::c_void;
    pub fn valloc(__size: size_t) -> *mut ::alpm_t::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::alpm_t::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::alpm_t::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::alpm_t::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::alpm_t::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::alpm_t::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::alpm_t::c_int,
                                                                  __arg:
                                                                      *mut ::alpm_t::c_void)>,
                   __arg: *mut ::alpm_t::c_void) -> ::alpm_t::c_int;
    pub fn exit(__status: ::alpm_t::c_int);
    pub fn quick_exit(__status: ::alpm_t::c_int);
    pub fn _Exit(__status: ::alpm_t::c_int);
    pub fn getenv(__name: *const ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn putenv(__string: *mut ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn setenv(__name: *const ::alpm_t::c_char,
                  __value: *const ::alpm_t::c_char,
                  __replace: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn unsetenv(__name: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn clearenv() -> ::alpm_t::c_int;
    pub fn mktemp(__template: *mut ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn mkstemp(__template: *mut ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn mkstemps(__template: *mut ::alpm_t::c_char,
                    __suffixlen: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn mkdtemp(__template: *mut ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn system(__command: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn realpath(__name: *const ::alpm_t::c_char,
                    __resolved: *mut ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn bsearch(__key: *const ::alpm_t::c_void,
                   __base: *const ::alpm_t::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::alpm_t::c_void;
    pub fn qsort(__base: *mut ::alpm_t::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::alpm_t::c_int) -> ::alpm_t::c_int;
    pub fn labs(__x: ::alpm_t::c_long) -> ::alpm_t::c_long;
    pub fn llabs(__x: ::alpm_t::c_longlong) -> ::alpm_t::c_longlong;
    pub fn div(__numer: ::alpm_t::c_int, __denom: ::alpm_t::c_int) -> div_t;
    pub fn ldiv(__numer: ::alpm_t::c_long, __denom: ::alpm_t::c_long)
     -> ldiv_t;
    pub fn lldiv(__numer: ::alpm_t::c_longlong, __denom: ::alpm_t::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: f64, __ndigit: ::alpm_t::c_int,
                __decpt: *mut ::alpm_t::c_int, __sign: *mut ::alpm_t::c_int)
     -> *mut ::alpm_t::c_char;
    pub fn fcvt(__value: f64, __ndigit: ::alpm_t::c_int,
                __decpt: *mut ::alpm_t::c_int, __sign: *mut ::alpm_t::c_int)
     -> *mut ::alpm_t::c_char;
    pub fn gcvt(__value: f64, __ndigit: ::alpm_t::c_int,
                __buf: *mut ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn qecvt(__value: f64, __ndigit: ::alpm_t::c_int,
                 __decpt: *mut ::alpm_t::c_int, __sign: *mut ::alpm_t::c_int)
     -> *mut ::alpm_t::c_char;
    pub fn qfcvt(__value: f64, __ndigit: ::alpm_t::c_int,
                 __decpt: *mut ::alpm_t::c_int, __sign: *mut ::alpm_t::c_int)
     -> *mut ::alpm_t::c_char;
    pub fn qgcvt(__value: f64, __ndigit: ::alpm_t::c_int,
                 __buf: *mut ::alpm_t::c_char) -> *mut ::alpm_t::c_char;
    pub fn ecvt_r(__value: f64, __ndigit: ::alpm_t::c_int,
                  __decpt: *mut ::alpm_t::c_int, __sign: *mut ::alpm_t::c_int,
                  __buf: *mut ::alpm_t::c_char, __len: size_t)
     -> ::alpm_t::c_int;
    pub fn fcvt_r(__value: f64, __ndigit: ::alpm_t::c_int,
                  __decpt: *mut ::alpm_t::c_int, __sign: *mut ::alpm_t::c_int,
                  __buf: *mut ::alpm_t::c_char, __len: size_t)
     -> ::alpm_t::c_int;
    pub fn qecvt_r(__value: f64, __ndigit: ::alpm_t::c_int,
                   __decpt: *mut ::alpm_t::c_int,
                   __sign: *mut ::alpm_t::c_int, __buf: *mut ::alpm_t::c_char,
                   __len: size_t) -> ::alpm_t::c_int;
    pub fn qfcvt_r(__value: f64, __ndigit: ::alpm_t::c_int,
                   __decpt: *mut ::alpm_t::c_int,
                   __sign: *mut ::alpm_t::c_int, __buf: *mut ::alpm_t::c_char,
                   __len: size_t) -> ::alpm_t::c_int;
    pub fn mblen(__s: *const ::alpm_t::c_char, __n: size_t)
     -> ::alpm_t::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::alpm_t::c_char,
                  __n: size_t) -> ::alpm_t::c_int;
    pub fn wctomb(__s: *mut ::alpm_t::c_char, __wchar: wchar_t)
     -> ::alpm_t::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::alpm_t::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::alpm_t::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::alpm_t::c_char,
                     __tokens: *const *mut ::alpm_t::c_char,
                     __valuep: *mut *mut ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn alpm_list_free(list: *mut alpm_list_t);
    pub fn alpm_list_free_inner(list: *mut alpm_list_t,
                                fn_: alpm_list_fn_free);
    pub fn alpm_list_add(list: *mut alpm_list_t, data: *mut ::alpm_t::c_void)
     -> *mut alpm_list_t;
    pub fn alpm_list_append(list: *mut *mut alpm_list_t,
                            data: *mut ::alpm_t::c_void) -> *mut alpm_list_t;
    pub fn alpm_list_add_sorted(list: *mut alpm_list_t,
                                data: *mut ::alpm_t::c_void,
                                fn_: alpm_list_fn_cmp) -> *mut alpm_list_t;
    pub fn alpm_list_join(first: *mut alpm_list_t, second: *mut alpm_list_t)
     -> *mut alpm_list_t;
    pub fn alpm_list_mmerge(left: *mut alpm_list_t, right: *mut alpm_list_t,
                            fn_: alpm_list_fn_cmp) -> *mut alpm_list_t;
    pub fn alpm_list_msort(list: *mut alpm_list_t, n: size_t,
                           fn_: alpm_list_fn_cmp) -> *mut alpm_list_t;
    pub fn alpm_list_remove_item(haystack: *mut alpm_list_t,
                                 item: *mut alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_list_remove(haystack: *mut alpm_list_t,
                            needle: *const ::alpm_t::c_void,
                            fn_: alpm_list_fn_cmp,
                            data: *mut *mut ::alpm_t::c_void)
     -> *mut alpm_list_t;
    pub fn alpm_list_remove_str(haystack: *mut alpm_list_t,
                                needle: *const ::alpm_t::c_char,
                                data: *mut *mut ::alpm_t::c_char)
     -> *mut alpm_list_t;
    pub fn alpm_list_remove_dupes(list: *const alpm_list_t)
     -> *mut alpm_list_t;
    pub fn alpm_list_strdup(list: *const alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_list_copy(list: *const alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_list_copy_data(list: *const alpm_list_t, size: size_t)
     -> *mut alpm_list_t;
    pub fn alpm_list_reverse(list: *mut alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_list_nth(list: *const alpm_list_t, n: size_t)
     -> *mut alpm_list_t;
    pub fn alpm_list_next(list: *const alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_list_previous(list: *const alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_list_last(list: *const alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_list_count(list: *const alpm_list_t) -> size_t;
    pub fn alpm_list_find(haystack: *const alpm_list_t,
                          needle: *const ::alpm_t::c_void,
                          fn_: alpm_list_fn_cmp) -> *mut ::alpm_t::c_void;
    pub fn alpm_list_find_ptr(haystack: *const alpm_list_t,
                              needle: *const ::alpm_t::c_void)
     -> *mut ::alpm_t::c_void;
    pub fn alpm_list_find_str(haystack: *const alpm_list_t,
                              needle: *const ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn alpm_list_diff(lhs: *const alpm_list_t, rhs: *const alpm_list_t,
                          fn_: alpm_list_fn_cmp) -> *mut alpm_list_t;
    pub fn alpm_list_diff_sorted(left: *const alpm_list_t,
                                 right: *const alpm_list_t,
                                 fn_: alpm_list_fn_cmp,
                                 onlyleft: *mut *mut alpm_list_t,
                                 onlyright: *mut *mut alpm_list_t);
    pub fn alpm_list_to_array(list: *const alpm_list_t, n: size_t,
                              size: size_t) -> *mut ::alpm_t::c_void;
    pub fn alpm_errno(handle: *mut alpm_handle_t) -> alpm_errno_t;
    pub fn alpm_strerror(err: alpm_errno_t) -> *const ::alpm_t::c_char;
    pub fn alpm_logaction(handle: *mut alpm_handle_t,
                          prefix: *const ::alpm_t::c_char,
                          fmt: *const ::alpm_t::c_char, ...)
     -> ::alpm_t::c_int;
    pub fn alpm_fetch_pkgurl(handle: *mut alpm_handle_t,
                             url: *const ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn alpm_option_get_logcb(handle: *mut alpm_handle_t) -> alpm_cb_log;
    pub fn alpm_option_set_logcb(handle: *mut alpm_handle_t, cb: alpm_cb_log)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_dlcb(handle: *mut alpm_handle_t)
     -> alpm_cb_download;
    pub fn alpm_option_set_dlcb(handle: *mut alpm_handle_t,
                                cb: alpm_cb_download) -> ::alpm_t::c_int;
    pub fn alpm_option_get_fetchcb(handle: *mut alpm_handle_t)
     -> alpm_cb_fetch;
    pub fn alpm_option_set_fetchcb(handle: *mut alpm_handle_t,
                                   cb: alpm_cb_fetch) -> ::alpm_t::c_int;
    pub fn alpm_option_get_totaldlcb(handle: *mut alpm_handle_t)
     -> alpm_cb_totaldl;
    pub fn alpm_option_set_totaldlcb(handle: *mut alpm_handle_t,
                                     cb: alpm_cb_totaldl) -> ::alpm_t::c_int;
    pub fn alpm_option_get_eventcb(handle: *mut alpm_handle_t)
     -> alpm_cb_event;
    pub fn alpm_option_set_eventcb(handle: *mut alpm_handle_t,
                                   cb: alpm_cb_event) -> ::alpm_t::c_int;
    pub fn alpm_option_get_questioncb(handle: *mut alpm_handle_t)
     -> alpm_cb_question;
    pub fn alpm_option_set_questioncb(handle: *mut alpm_handle_t,
                                      cb: alpm_cb_question)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_progresscb(handle: *mut alpm_handle_t)
     -> alpm_cb_progress;
    pub fn alpm_option_set_progresscb(handle: *mut alpm_handle_t,
                                      cb: alpm_cb_progress)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_root(handle: *mut alpm_handle_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_option_get_dbpath(handle: *mut alpm_handle_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_option_get_lockfile(handle: *mut alpm_handle_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_option_get_cachedirs(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_option_set_cachedirs(handle: *mut alpm_handle_t,
                                     cachedirs: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_add_cachedir(handle: *mut alpm_handle_t,
                                    cachedir: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_remove_cachedir(handle: *mut alpm_handle_t,
                                       cachedir: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_hookdirs(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_option_set_hookdirs(handle: *mut alpm_handle_t,
                                    hookdirs: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_add_hookdir(handle: *mut alpm_handle_t,
                                   hookdir: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_remove_hookdir(handle: *mut alpm_handle_t,
                                      hookdir: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_logfile(handle: *mut alpm_handle_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_option_set_logfile(handle: *mut alpm_handle_t,
                                   logfile: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_gpgdir(handle: *mut alpm_handle_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_option_set_gpgdir(handle: *mut alpm_handle_t,
                                  gpgdir: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_usesyslog(handle: *mut alpm_handle_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_set_usesyslog(handle: *mut alpm_handle_t,
                                     usesyslog: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_noupgrades(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_option_add_noupgrade(handle: *mut alpm_handle_t,
                                     path: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_set_noupgrades(handle: *mut alpm_handle_t,
                                      noupgrade: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_remove_noupgrade(handle: *mut alpm_handle_t,
                                        path: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_match_noupgrade(handle: *mut alpm_handle_t,
                                       path: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_noextracts(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_option_add_noextract(handle: *mut alpm_handle_t,
                                     path: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_set_noextracts(handle: *mut alpm_handle_t,
                                      noextract: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_remove_noextract(handle: *mut alpm_handle_t,
                                        path: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_match_noextract(handle: *mut alpm_handle_t,
                                       path: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_ignorepkgs(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_option_add_ignorepkg(handle: *mut alpm_handle_t,
                                     pkg: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_set_ignorepkgs(handle: *mut alpm_handle_t,
                                      ignorepkgs: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_remove_ignorepkg(handle: *mut alpm_handle_t,
                                        pkg: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_ignoregroups(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_option_add_ignoregroup(handle: *mut alpm_handle_t,
                                       grp: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_set_ignoregroups(handle: *mut alpm_handle_t,
                                        ignoregrps: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_remove_ignoregroup(handle: *mut alpm_handle_t,
                                          grp: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_assumeinstalled(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_option_add_assumeinstalled(handle: *mut alpm_handle_t,
                                           dep: *const alpm_depend_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_set_assumeinstalled(handle: *mut alpm_handle_t,
                                           deps: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_remove_assumeinstalled(handle: *mut alpm_handle_t,
                                              dep: *const alpm_depend_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_arch(handle: *mut alpm_handle_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_option_set_arch(handle: *mut alpm_handle_t,
                                arch: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_deltaratio(handle: *mut alpm_handle_t) -> f64;
    pub fn alpm_option_set_deltaratio(handle: *mut alpm_handle_t, ratio: f64)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_checkspace(handle: *mut alpm_handle_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_set_checkspace(handle: *mut alpm_handle_t,
                                      checkspace: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_dbext(handle: *mut alpm_handle_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_option_set_dbext(handle: *mut alpm_handle_t,
                                 dbext: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_default_siglevel(handle: *mut alpm_handle_t)
     -> alpm_siglevel_t;
    pub fn alpm_option_set_default_siglevel(handle: *mut alpm_handle_t,
                                            level: alpm_siglevel_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_local_file_siglevel(handle: *mut alpm_handle_t)
     -> alpm_siglevel_t;
    pub fn alpm_option_set_local_file_siglevel(handle: *mut alpm_handle_t,
                                               level: alpm_siglevel_t)
     -> ::alpm_t::c_int;
    pub fn alpm_option_get_remote_file_siglevel(handle: *mut alpm_handle_t)
     -> alpm_siglevel_t;
    pub fn alpm_option_set_remote_file_siglevel(handle: *mut alpm_handle_t,
                                                level: alpm_siglevel_t)
     -> ::alpm_t::c_int;
    pub fn alpm_get_localdb(handle: *mut alpm_handle_t) -> *mut alpm_db_t;
    pub fn alpm_get_syncdbs(handle: *mut alpm_handle_t) -> *mut alpm_list_t;
    pub fn alpm_register_syncdb(handle: *mut alpm_handle_t,
                                treename: *const ::alpm_t::c_char,
                                level: alpm_siglevel_t) -> *mut alpm_db_t;
    pub fn alpm_unregister_all_syncdbs(handle: *mut alpm_handle_t)
     -> ::alpm_t::c_int;
    pub fn alpm_db_unregister(db: *mut alpm_db_t) -> ::alpm_t::c_int;
    pub fn alpm_db_get_name(db: *const alpm_db_t) -> *const ::alpm_t::c_char;
    pub fn alpm_db_get_siglevel(db: *mut alpm_db_t) -> alpm_siglevel_t;
    pub fn alpm_db_get_valid(db: *mut alpm_db_t) -> ::alpm_t::c_int;
    pub fn alpm_db_get_servers(db: *const alpm_db_t) -> *mut alpm_list_t;
    pub fn alpm_db_set_servers(db: *mut alpm_db_t, servers: *mut alpm_list_t)
     -> ::alpm_t::c_int;
    pub fn alpm_db_add_server(db: *mut alpm_db_t,
                              url: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_db_remove_server(db: *mut alpm_db_t,
                                 url: *const ::alpm_t::c_char)
     -> ::alpm_t::c_int;
    pub fn alpm_db_update(force: ::alpm_t::c_int, db: *mut alpm_db_t)
     -> ::alpm_t::c_int;
    pub fn alpm_db_get_pkg(db: *mut alpm_db_t, name: *const ::alpm_t::c_char)
     -> *mut alpm_pkg_t;
    pub fn alpm_db_get_pkgcache(db: *mut alpm_db_t) -> *mut alpm_list_t;
    pub fn alpm_db_get_group(db: *mut alpm_db_t,
                             name: *const ::alpm_t::c_char)
     -> *mut alpm_group_t;
    pub fn alpm_db_get_groupcache(db: *mut alpm_db_t) -> *mut alpm_list_t;
    pub fn alpm_db_search(db: *mut alpm_db_t, needles: *const alpm_list_t)
     -> *mut alpm_list_t;
    pub fn alpm_db_set_usage(db: *mut alpm_db_t, usage: alpm_db_usage_t)
     -> ::alpm_t::c_int;
    pub fn alpm_db_get_usage(db: *mut alpm_db_t, usage: *mut alpm_db_usage_t)
     -> ::alpm_t::c_int;
    pub fn alpm_pkg_load(handle: *mut alpm_handle_t,
                         filename: *const ::alpm_t::c_char,
                         full: ::alpm_t::c_int, level: alpm_siglevel_t,
                         pkg: *mut *mut alpm_pkg_t) -> ::alpm_t::c_int;
    pub fn alpm_pkg_find(haystack: *mut alpm_list_t,
                         needle: *const ::alpm_t::c_char) -> *mut alpm_pkg_t;
    pub fn alpm_pkg_free(pkg: *mut alpm_pkg_t) -> ::alpm_t::c_int;
    pub fn alpm_pkg_checkmd5sum(pkg: *mut alpm_pkg_t) -> ::alpm_t::c_int;
    pub fn alpm_pkg_vercmp(a: *const ::alpm_t::c_char,
                           b: *const ::alpm_t::c_char) -> ::alpm_t::c_int;
    pub fn alpm_pkg_compute_requiredby(pkg: *mut alpm_pkg_t)
     -> *mut alpm_list_t;
    pub fn alpm_pkg_compute_optionalfor(pkg: *mut alpm_pkg_t)
     -> *mut alpm_list_t;
    pub fn alpm_pkg_should_ignore(handle: *mut alpm_handle_t,
                                  pkg: *mut alpm_pkg_t) -> ::alpm_t::c_int;
    pub fn alpm_pkg_get_filename(pkg: *mut alpm_pkg_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_base(pkg: *mut alpm_pkg_t) -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_name(pkg: *mut alpm_pkg_t) -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_version(pkg: *mut alpm_pkg_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_origin(pkg: *mut alpm_pkg_t) -> alpm_pkgfrom_t;
    pub fn alpm_pkg_get_desc(pkg: *mut alpm_pkg_t) -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_url(pkg: *mut alpm_pkg_t) -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_builddate(pkg: *mut alpm_pkg_t) -> alpm_time_t;
    pub fn alpm_pkg_get_installdate(pkg: *mut alpm_pkg_t) -> alpm_time_t;
    pub fn alpm_pkg_get_packager(pkg: *mut alpm_pkg_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_md5sum(pkg: *mut alpm_pkg_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_sha256sum(pkg: *mut alpm_pkg_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_arch(pkg: *mut alpm_pkg_t) -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_size(pkg: *mut alpm_pkg_t) -> off_t;
    pub fn alpm_pkg_get_isize(pkg: *mut alpm_pkg_t) -> off_t;
    pub fn alpm_pkg_get_reason(pkg: *mut alpm_pkg_t) -> alpm_pkgreason_t;
    pub fn alpm_pkg_get_licenses(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_groups(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_depends(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_optdepends(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_conflicts(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_provides(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_deltas(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_replaces(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_files(pkg: *mut alpm_pkg_t) -> *mut alpm_filelist_t;
    pub fn alpm_pkg_get_backup(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_get_db(pkg: *mut alpm_pkg_t) -> *mut alpm_db_t;
    pub fn alpm_pkg_get_base64_sig(pkg: *mut alpm_pkg_t)
     -> *const ::alpm_t::c_char;
    pub fn alpm_pkg_get_validation(pkg: *mut alpm_pkg_t)
     -> alpm_pkgvalidation_t;
    pub fn alpm_pkg_changelog_open(pkg: *mut alpm_pkg_t)
     -> *mut ::alpm_t::c_void;
    pub fn alpm_pkg_changelog_read(ptr: *mut ::alpm_t::c_void, size: size_t,
                                   pkg: *const alpm_pkg_t,
                                   fp: *mut ::alpm_t::c_void) -> size_t;
    pub fn alpm_pkg_changelog_close(pkg: *const alpm_pkg_t,
                                    fp: *mut ::alpm_t::c_void)
     -> ::alpm_t::c_int;
    pub fn alpm_pkg_mtree_open(pkg: *mut alpm_pkg_t) -> *mut archive;
    pub fn alpm_pkg_mtree_next(pkg: *const alpm_pkg_t, archive: *mut archive,
                               entry: *mut *mut archive_entry)
     -> ::alpm_t::c_int;
    pub fn alpm_pkg_mtree_close(pkg: *const alpm_pkg_t, archive: *mut archive)
     -> ::alpm_t::c_int;
    pub fn alpm_pkg_has_scriptlet(pkg: *mut alpm_pkg_t) -> ::alpm_t::c_int;
    pub fn alpm_pkg_download_size(newpkg: *mut alpm_pkg_t) -> off_t;
    pub fn alpm_pkg_unused_deltas(pkg: *mut alpm_pkg_t) -> *mut alpm_list_t;
    pub fn alpm_pkg_set_reason(pkg: *mut alpm_pkg_t, reason: alpm_pkgreason_t)
     -> ::alpm_t::c_int;
    pub fn alpm_filelist_contains(filelist: *mut alpm_filelist_t,
                                  path: *const ::alpm_t::c_char)
     -> *mut alpm_file_t;
    pub fn alpm_pkg_check_pgp_signature(pkg: *mut alpm_pkg_t,
                                        siglist: *mut alpm_siglist_t)
     -> ::alpm_t::c_int;
    pub fn alpm_db_check_pgp_signature(db: *mut alpm_db_t,
                                       siglist: *mut alpm_siglist_t)
     -> ::alpm_t::c_int;
    pub fn alpm_siglist_cleanup(siglist: *mut alpm_siglist_t)
     -> ::alpm_t::c_int;
    pub fn alpm_decode_signature(base64_data: *const ::alpm_t::c_char,
                                 data: *mut *mut ::alpm_t::c_uchar,
                                 data_len: *mut size_t) -> ::alpm_t::c_int;
    pub fn alpm_extract_keyid(handle: *mut alpm_handle_t,
                              identifier: *const ::alpm_t::c_char,
                              sig: *const ::alpm_t::c_uchar, len: size_t,
                              keys: *mut *mut alpm_list_t) -> ::alpm_t::c_int;
    pub fn alpm_find_group_pkgs(dbs: *mut alpm_list_t,
                                name: *const ::alpm_t::c_char)
     -> *mut alpm_list_t;
    pub fn alpm_sync_newversion(pkg: *mut alpm_pkg_t,
                                dbs_sync: *mut alpm_list_t)
     -> *mut alpm_pkg_t;
    pub fn alpm_trans_get_flags(handle: *mut alpm_handle_t)
     -> alpm_transflag_t;
    pub fn alpm_trans_get_add(handle: *mut alpm_handle_t) -> *mut alpm_list_t;
    pub fn alpm_trans_get_remove(handle: *mut alpm_handle_t)
     -> *mut alpm_list_t;
    pub fn alpm_trans_init(handle: *mut alpm_handle_t,
                           flags: alpm_transflag_t) -> ::alpm_t::c_int;
    pub fn alpm_trans_prepare(handle: *mut alpm_handle_t,
                              data: *mut *mut alpm_list_t) -> ::alpm_t::c_int;
    pub fn alpm_trans_commit(handle: *mut alpm_handle_t,
                             data: *mut *mut alpm_list_t) -> ::alpm_t::c_int;
    pub fn alpm_trans_interrupt(handle: *mut alpm_handle_t)
     -> ::alpm_t::c_int;
    pub fn alpm_trans_release(handle: *mut alpm_handle_t) -> ::alpm_t::c_int;
    pub fn alpm_sync_sysupgrade(handle: *mut alpm_handle_t,
                                enable_downgrade: ::alpm_t::c_int)
     -> ::alpm_t::c_int;
    pub fn alpm_add_pkg(handle: *mut alpm_handle_t, pkg: *mut alpm_pkg_t)
     -> ::alpm_t::c_int;
    pub fn alpm_remove_pkg(handle: *mut alpm_handle_t, pkg: *mut alpm_pkg_t)
     -> ::alpm_t::c_int;
    pub fn alpm_checkdeps(handle: *mut alpm_handle_t,
                          pkglist: *mut alpm_list_t, remove: *mut alpm_list_t,
                          upgrade: *mut alpm_list_t,
                          reversedeps: ::alpm_t::c_int) -> *mut alpm_list_t;
    pub fn alpm_find_satisfier(pkgs: *mut alpm_list_t,
                               depstring: *const ::alpm_t::c_char)
     -> *mut alpm_pkg_t;
    pub fn alpm_find_dbs_satisfier(handle: *mut alpm_handle_t,
                                   dbs: *mut alpm_list_t,
                                   depstring: *const ::alpm_t::c_char)
     -> *mut alpm_pkg_t;
    pub fn alpm_checkconflicts(handle: *mut alpm_handle_t,
                               pkglist: *mut alpm_list_t) -> *mut alpm_list_t;
    pub fn alpm_dep_compute_string(dep: *const alpm_depend_t)
     -> *mut ::alpm_t::c_char;
    pub fn alpm_dep_from_string(depstring: *const ::alpm_t::c_char)
     -> *mut alpm_depend_t;
    pub fn alpm_dep_free(dep: *mut alpm_depend_t);
    pub fn alpm_compute_md5sum(filename: *const ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn alpm_compute_sha256sum(filename: *const ::alpm_t::c_char)
     -> *mut ::alpm_t::c_char;
    pub fn alpm_initialize(root: *const ::alpm_t::c_char,
                           dbpath: *const ::alpm_t::c_char,
                           err: *mut alpm_errno_t) -> *mut alpm_handle_t;
    pub fn alpm_release(handle: *mut alpm_handle_t) -> ::alpm_t::c_int;
    pub fn alpm_unlock(handle: *mut alpm_handle_t) -> ::alpm_t::c_int;
    pub fn alpm_version() -> *const ::alpm_t::c_char;
    pub fn alpm_capabilities() -> alpm_caps;
    pub fn alpm_fileconflict_free(conflict: *mut alpm_fileconflict_t);
    pub fn alpm_depmissing_free(miss: *mut alpm_depmissing_t);
    pub fn alpm_conflict_free(conflict: *mut alpm_conflict_t);
}

